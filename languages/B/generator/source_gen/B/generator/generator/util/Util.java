package B.generator.generator.util;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import B.behavior.StructSet__BehaviorDescriptor;
import java.util.HashMap;

public class Util {

  public static List<SNode> outputparamlist;

  public static int structCounter = 1;

  public static Map<SNode, String> structNames;

  public static String structName = "struct_def_";


  public Util() {
    outputparamlist = new ArrayList<SNode>();
  }


  public static String getName(SNode set) {
    if (structNames == null) {
      return setName(set);
    } else {
      if (checkIfSetExists(set)) {
        for (SNode e : SetSequence.fromSet(MapSequence.fromMap(structNames).keySet())) {
          if ((boolean) StructSet__BehaviorDescriptor.equals_id7E1Po1byfmE.invoke(e, set)) {
            return MapSequence.fromMap(structNames).get(e);
          }
        }
      }
    }
    String newStructName = structName + structCounter;
    structCounter++;
    MapSequence.fromMap(structNames).put(set, newStructName);
    return newStructName;
  }



  public static String setName(SNode newStruct) {
    if (structNames == null) {
      structNames = MapSequence.fromMap(new HashMap<SNode, String>());
    }
    String name = structName + structCounter;
    structCounter++;
    MapSequence.fromMap(structNames).put(newStruct, name);
    return name;
  }

  public static boolean checkIfSetExists(SNode structSet) {
    for (SNode e : SetSequence.fromSet(MapSequence.fromMap(Util.structNames).keySet())) {
      if ((boolean) StructSet__BehaviorDescriptor.equals_id7E1Po1byfmE.invoke(structSet, e)) {
        return true;
      }
    }
    return false;
  }
  public static void clearMemory() {
    structCounter = 1;
    structNames = MapSequence.fromMap(new HashMap<SNode, String>());
  }
}
