package B.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Operation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, "B.structure.Operation");

  public static final SMethod<Boolean> BalanceStrictEqualityCheck_id283pMPgAuW2 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("BalanceStrictEqualityCheck").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("283pMPgAuW2").build();
  public static final SMethod<Boolean> checkIfReentrant_idmRvs4iaW_k = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("checkIfReentrant").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("mRvs4iaW_k").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(BalanceStrictEqualityCheck_id283pMPgAuW2, checkIfReentrant_idmRvs4iaW_k);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean BalanceStrictEqualityCheck_id283pMPgAuW2(@NotNull SNode __thisNode__) {
    for (SNode elem : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.preconditions$4p39))) {
      if ((boolean) Predicate__BehaviorDescriptor.BalanceStrictEquality_id283pMPgAymH.invoke(elem)) {
        return true;
      }
    }
    return false;
  }
  /*package*/ static boolean checkIfReentrant_idmRvs4iaW_k(@NotNull SNode __thisNode__) {
    for (SNode sub : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.body$4v9z))) {
      if (SNodeOperations.isInstanceOf(sub, CONCEPTS.TransferOperation$Fn)) {
        SNode to = (SNode) sub;
        // check if it's a transfer from the contract 
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(to, LINKS.from$fZyX), CONCEPTS.THIS$mL)) {
          int ind = ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.body$4v9z)).indexOf(sub);
          //  check if Not last element 
          if (SLinkOperations.getChildren(__thisNode__, LINKS.body$4v9z).size() > ind) {
            for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.body$4v9z)).subListSequence(ind, SLinkOperations.getChildren(__thisNode__, LINKS.body$4v9z).size())) {
              if (SNodeOperations.isInstanceOf(e, CONCEPTS.BecomesSubstitution$SI)) {
                return true;
              }
            }
          }
        }
      }
    }
    return false;
  }

  /*package*/ Operation__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) BalanceStrictEqualityCheck_id283pMPgAuW2(node));
      case 1:
        return (T) ((Boolean) checkIfReentrant_idmRvs4iaW_k(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink preconditions$4p39 = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, 0x6d3985c698ada69dL, "preconditions");
    /*package*/ static final SContainmentLink body$4v9z = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, 0x6d3985c698ada6a2L, "body");
    /*package*/ static final SContainmentLink from$fZyX = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L, 0x3d1067ce476396f8L, "from");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TransferOperation$Fn = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L, "B.structure.TransferOperation");
    /*package*/ static final SConcept BecomesSubstitution$SI = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, "B.structure.BecomesSubstitution");
    /*package*/ static final SConcept THIS$mL = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5b77dc1122c9701L, "B.structure.THIS");
  }
}
