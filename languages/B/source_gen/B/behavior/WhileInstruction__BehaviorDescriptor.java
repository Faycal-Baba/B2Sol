package B.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class WhileInstruction__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, "B.structure.WhileInstruction");

  public static final SMethod<Void> setCondition_id5vMBZAy7pZP = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setCondition").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy7pZP").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> addInstr_id5vMBZAy7qzB = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addInstr").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy7qzB").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> setInvariant_id5vMBZAy7un4 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setInvariant").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy7un4").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> setVariant_id5vMBZAy7uvP = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setVariant").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy7uvP").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(setCondition_id5vMBZAy7pZP, addInstr_id5vMBZAy7qzB, setInvariant_id5vMBZAy7un4, setVariant_id5vMBZAy7uvP);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void setCondition_id5vMBZAy7pZP(@NotNull SNode __thisNode__, SNode condition) {
    SLinkOperations.setTarget(__thisNode__, LINKS.condition$RlMr, condition);
  }
  /*package*/ static void addInstr_id5vMBZAy7qzB(@NotNull SNode __thisNode__, SNode substitution) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.body$Rmgt)).addElement(substitution);
  }
  /*package*/ static void setInvariant_id5vMBZAy7un4(@NotNull SNode __thisNode__, SNode inv) {
    SLinkOperations.setTarget(__thisNode__, LINKS.invariant$t5b4, inv);
  }
  /*package*/ static void setVariant_id5vMBZAy7uvP(@NotNull SNode __thisNode__, SNode variant) {
    SLinkOperations.setTarget(__thisNode__, LINKS.variant$tb2t, variant);
  }

  /*package*/ WhileInstruction__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        setCondition_id5vMBZAy7pZP(node, (SNode) parameters[0]);
        return null;
      case 1:
        addInstr_id5vMBZAy7qzB(node, (SNode) parameters[0]);
        return null;
      case 2:
        setInvariant_id5vMBZAy7un4(node, (SNode) parameters[0]);
        return null;
      case 3:
        setVariant_id5vMBZAy7uvP(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink condition$RlMr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, 0x7d382cf97c801d47L, "condition");
    /*package*/ static final SContainmentLink body$Rmgt = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, 0x7d382cf97c801d49L, "body");
    /*package*/ static final SContainmentLink invariant$t5b4 = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, 0x7d382cf97c802047L, "invariant");
    /*package*/ static final SContainmentLink variant$tb2t = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, 0x7d382cf97c80204bL, "variant");
  }
}
