package Application.ImporterLogic;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.nio.file.Path;
import java.nio.file.Files;
import java.io.IOException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import application.BImplListener;
import application.BParserInteface;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import application.Util;
import java.nio.file.Paths;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import B.behavior.EnumeratedSet__BehaviorDescriptor;
import B.behavior.Machine__BehaviorDescriptor;
import application.BPreconditionListener;
import antlrGenerated.BPreconditionGrammarParser;
import B.behavior.TypingPredicate__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import antlrGenerated.BImplGrammarParser;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import B.behavior.Initialisation__BehaviorDescriptor;
import B.behavior.Operation__BehaviorDescriptor;
import B.behavior.BNegativeExpression__BehaviorDescriptor;
import B.behavior.BNotExpression__BehaviorDescriptor;
import B.behavior.BParenthesisExpression__BehaviorDescriptor;
import B.behavior.BBinaryExpression__BehaviorDescriptor;
import B.behavior.succ__BehaviorDescriptor;
import B.behavior.pred__BehaviorDescriptor;
import B.behavior.BBalanceOf__BehaviorDescriptor;
import B.behavior.BCardExpression__BehaviorDescriptor;
import B.behavior.BMappingAccessExpression__BehaviorDescriptor;
import B.behavior.BRecordExpression__BehaviorDescriptor;
import B.behavior.BBoolExpression__BehaviorDescriptor;
import B.behavior.BIdentifier__BehaviorDescriptor;
import B.behavior.BecomesSubstitution__BehaviorDescriptor;
import B.behavior.BArrayPush__BehaviorDescriptor;
import B.behavior.TransferOperation__BehaviorDescriptor;
import B.behavior.IfInstruction__BehaviorDescriptor;
import B.behavior.ElseIf__BehaviorDescriptor;
import B.behavior.WhileInstruction__BehaviorDescriptor;
import B.behavior.MappignGet__BehaviorDescriptor;
import B.behavior.BVarDec__BehaviorDescriptor;
import B.behavior.BOperationCall__BehaviorDescriptor;
import B.behavior.BFunctionCall__BehaviorDescriptor;
import B.behavior.BVarDeclaration__BehaviorDescriptor;
import org.antlr.v4.runtime.tree.TerminalNode;
import B.behavior.VarIn__BehaviorDescriptor;
import B.behavior.BStructMemberAccess__BehaviorDescriptor;
import B.behavior.InstructionList__BehaviorDescriptor;
import antlrGenerated.BFunctionTypeGrammarParser;
import B.behavior.BArrayType__BehaviorDescriptor;
import B.behavior.StructSet__BehaviorDescriptor;
import B.behavior.userDefinedSet__BehaviorDescriptor;
import B.behavior.enumMember__BehaviorDescriptor;
import B.behavior.Function__BehaviorDescriptor;
import application.BFunctionTypeListener;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class Importer {
  private static final Logger LOG = LogManager.getLogger(Importer.class);

  public static Map<String, SNode> saveMappingValueType = new HashMap<String, SNode>();

  public static List<String> listOfArraysDeclared = ListSequence.fromList(new ArrayList<String>());

  private static List<SNode> enumList = ListSequence.fromList(new ArrayList<SNode>());

  private static Map<String, List<String>> structureMembers = new HashMap<String, List<String>>();

  private static int firstOperationIFCLause = 1;


  public static void writeGeneratedSolFile(String file, Path path) {




    try {
      Files.write(path, file.getBytes());

    } catch (IOException e) {
    }

  }



  public static SNode importData(String path) throws Exception {

    SNode machine = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01cL, "B.structure.Machine"));
    String bfile = readFile(path);
    BImplListener tree;


    try {
      tree = BParserInteface.readBImpl(bfile);
    } catch (Exception e) {
      LoggingRuntime.logMsgView(Level.INFO, "ERROR: ................Parsing File Failed : IN Function importData............... " + e.toString(), Importer.class, null, null);
      System.out.println("ERROR: ................Parsing File Failed : IN Function importData............... " + e.toString());
      return null;
    }

    String refines = tree.getRefines();

    String abstractMachinePath = Util.evalPath(Paths.get(path), refines);

    String abstractMachine = readFile(abstractMachinePath);

    // add enumerations if exist 
    Map<String, List<String>> handleSetsClause = Util.handleSetsClause(abstractMachine);
    if (handleSetsClause != null && !(handleSetsClause.isEmpty())) {
      for (IMapping<String, List<String>> pair : MapSequence.fromMap(handleSetsClause)) {
        SNode enumSet = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c774b48L, "B.structure.EnumeratedSet"));
        EnumeratedSet__BehaviorDescriptor.setName_id5vMBZAy7veY.invoke(enumSet, pair.key());
        for (String elem : pair.value()) {
          EnumeratedSet__BehaviorDescriptor.addElement_id5vMBZAy7vZ0.invoke(enumSet, elem);
        }
        ListSequence.fromList(enumList).addElement(enumSet);
        Machine__BehaviorDescriptor.addEnumeratedSet_id5vMBZAy7ZS7.invoke(machine, enumSet);
      }

    }
    // precondition and input param 
    Map<String, List<SNode>> operationsPredicates = MapSequence.fromMap(new HashMap<String, List<SNode>>());
    Map<String, List<SNode>> operationsTypingParams = MapSequence.fromMap(new HashMap<String, List<SNode>>());

    if (abstractMachine != null) {

      Map<String, BPreconditionListener> mapOfPrecond = BParserInteface.readOperationsPreconditions(abstractMachine);


      if (mapOfPrecond != null && !(mapOfPrecond.isEmpty())) {
        for (String op : mapOfPrecond.keySet()) {
          Map<String, BPreconditionGrammarParser.BasicTypeContext> typingPredicates = mapOfPrecond.get(op).getTypingPredicates();

          if (typingPredicates != null && !(typingPredicates.isEmpty())) {
            List<SNode> tpparams = ListSequence.fromList(new ArrayList<SNode>());
            for (String inputp : typingPredicates.keySet()) {
              SNode evaluateBasicType = evaluateBasicTypePrec(typingPredicates.get(inputp));
              SNode TpPredicate = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd9L, "B.structure.TypingPredicateParameter"));
              TypingPredicate__BehaviorDescriptor.setName_id5vMBZAy5RAC.invoke(TpPredicate, inputp);
              TypingPredicate__BehaviorDescriptor.setSet_id5vMBZAy5UgC.invoke(TpPredicate, evaluateBasicType);
              ListSequence.fromList(tpparams).addElement(TpPredicate);
            }
            MapSequence.fromMap(operationsTypingParams).put(op, tpparams);
          }
        }
      }
    }


    Machine__BehaviorDescriptor.setName_id7B8mKgzk40V.invoke(machine, refines);

    List<String> mappingVariables = tree.getMappingVariable();
    if (mappingVariables.size() > 0) {
      for (String mappingName : mappingVariables) {
        String evalPath = Util.evalPath(Paths.get(path), mappingName);
        String readFile = readFile(evalPath);
        if (readFile != null) {
          SNode functionType = readFunctionType(readFile);
          SNode copy = SNodeOperations.copyNode(SLinkOperations.getTarget(functionType, LINKS.name$3HGV));
          Machine__BehaviorDescriptor.addVariable_id4UlU1vbSm6Y.invoke(machine, copy);
          Machine__BehaviorDescriptor.addInvariantPredicate_id5vMBZAy8h$w.invoke(machine, functionType);
        }
      }


    }
    List<String> listOfVarialbes = ListSequence.fromList(new ArrayList<String>());
    if (tree.getConcreteVariables() != null && !(tree.getConcreteVariables().isEmpty())) {
      for (String vr : tree.getConcreteVariables()) {
        String clean_i = clean_i(vr);
        ListSequence.fromList(listOfVarialbes).addElement(clean_i);
      }
      Machine__BehaviorDescriptor.addVariables_id7B8mKgzi0Bk.invoke(machine, listOfVarialbes);
    }

    Map<String, BImplGrammarParser.TypeContext> varTypingPredicates = tree.getVariablesTypingPredicates();

    if (varTypingPredicates != null & !(MapSequence.fromMap(varTypingPredicates).isEmpty())) {
      Iterator<IMapping<String, BImplGrammarParser.TypeContext>> iter = MapSequence.fromMap(varTypingPredicates).iterator();

      if (iter != null) {
        while (iter.hasNext()) {
          IMapping<String, BImplGrammarParser.TypeContext> context = iter.next();
          SNode type = evaluateBType(context.value());
          SNode tp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd7L, "B.structure.TypingPredicateInvariant"));
          String clean_i = clean_i(context.key());
          TypingPredicate__BehaviorDescriptor.setName_id5vMBZAy5RAC.invoke(tp, clean_i);
          TypingPredicate__BehaviorDescriptor.setSet_id5vMBZAy5UgC.invoke(tp, type);
          if (SNodeOperations.isInstanceOf(type, CONCEPTS.BArrayType$5m)) {
            ListSequence.fromList(listOfArraysDeclared).addElement(clean_i);
          }

          if (SNodeOperations.isInstanceOf(type, CONCEPTS.StructSet$we)) {
            SNode ss = (SNode) type;
            List<String> memberName = ListSequence.fromList(new ArrayList<String>());
            for (SNode member : ListSequence.fromList(SLinkOperations.getChildren(ss, LINKS.elements$ppwr))) {
              ListSequence.fromList(memberName).addElement(SPropertyOperations.getString(SLinkOperations.getTarget(member, LINKS.name$3HGV), PROPS.name$MnvL));
            }
            structureMembers.put(clean_i, memberName);
          }
          Machine__BehaviorDescriptor.addInvariantPredicate_id5vMBZAy8h$w.invoke(machine, tp);
        }
      }
    }
    Map<String, BImplGrammarParser.TypeContext> constantsTypingPredicates = tree.getConstantsTypingPredicates();
    Map<String, BImplGrammarParser.ExpressionContext> constantsValuations = tree.getConstantsValuation();

    if (constantsTypingPredicates != null && constantsValuations != null && !(constantsTypingPredicates.isEmpty()) && !(constantsValuations.isEmpty())) {
      for (String key : constantsTypingPredicates.keySet()) {
        // get key type valuation 
        BImplGrammarParser.TypeContext constantType = constantsTypingPredicates.get(key);
        SNode evaluatedBType = evaluateBType(constantType);
        // get key valuation 
        if (constantsValuations.get(key) != null) {
          BImplGrammarParser.ExpressionContext constantValuation = constantsValuations.get(key);
          SNode evaluatedExpression = evaluateExpression(constantValuation);
          Machine__BehaviorDescriptor.addConstantValuation_id5vMBZAy88ub.invoke(machine, evaluatedExpression, evaluatedBType, clean_i(key));
        } else {
          SNode tpp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd8L, "B.structure.TypingPredicateProperties"));
          TypingPredicate__BehaviorDescriptor.setName_id5vMBZAy5RAC.invoke(tpp, key);
          TypingPredicate__BehaviorDescriptor.setSet_id5vMBZAy5UgC.invoke(tpp, evaluatedBType);
          Machine__BehaviorDescriptor.addPropertiesPredicate_id5vMBZAy8oyU.invoke(machine, tpp);
        }
      }
    }

    List<BImplGrammarParser.StatementContext> init = tree.getInit();
    if (init != null && !(init.isEmpty())) {
      SNode initialisation = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6993c5af9L, "B.structure.Initialisation"));

      Map<String, String> initInputParam = BParserInteface.getInitInputParam(abstractMachine);
      if (initInputParam != null && !(initInputParam.isEmpty())) {
        for (IMapping<String, String> pair : MapSequence.fromMap(initInputParam)) {
          SNode tpp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd9L, "B.structure.TypingPredicateParameter"));
          TypingPredicate__BehaviorDescriptor.setName_id5vMBZAy5RAC.invoke(tpp, pair.key());
          SNode evaluateBasicTypeString = evaluateBasicTypeString(pair.value());
          TypingPredicate__BehaviorDescriptor.setSet_id5vMBZAy5UgC.invoke(tpp, evaluateBasicTypeString);
          Initialisation__BehaviorDescriptor.addInputParam_id7tut7_j36CI.invoke(initialisation, tpp);
        }
      }

      for (BImplGrammarParser.StatementContext st : ListSequence.fromList(init)) {
        SNode evaluateInstruction = evaluateInstruction(st);
        if (evaluateInstruction != null) {
          Initialisation__BehaviorDescriptor.addInstruction_id5vMBZAy7ASM.invoke(initialisation, evaluateInstruction);
        }
      }
      Machine__BehaviorDescriptor.setinit_id5vMBZAy8txW.invoke(machine, initialisation);
    }

    List<BImplGrammarParser.OperationContext> operationList = tree.getOperationList();

    if (operationList != null && !(operationList.isEmpty())) {
      for (BImplGrammarParser.OperationContext op : ListSequence.fromList(operationList)) {
        firstOperationIFCLause = 1;
        SNode operation_ = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, "B.structure.Operation"));
        Operation__BehaviorDescriptor.setName_id5vMBZAy7FbG.invoke(operation_, op.Identifier().getText());

        List<BImplGrammarParser.TypedVariableContext> typedVariable = op.typedVariable();
        for (BImplGrammarParser.TypedVariableContext tp : ListSequence.fromList(typedVariable)) {
          SNode evaluateBType = evaluateBType(tp.typingPredicate().type());
          Operation__BehaviorDescriptor.addOutputParam_id2frd_pONN_4.invoke(operation_, evaluateBType, tp.typingPredicate().Identifier().getText());
        }

        BImplGrammarParser.ExpressionListContext inputParam = op.inputParam;
        if (inputParam != null) {
          if (inputParam.expression() != null && inputParam.expression().size() > 0) {
            for (BImplGrammarParser.ExpressionContext ex : ListSequence.fromList(inputParam.expression())) {
              if (ex.getText().equals("msg_sender") && ex.getText().equals("block_timestamp") && ex.getText().equals("msg_value")) {
                Operation__BehaviorDescriptor.addInputParam_id5wdOlJ2mvKy.invoke(operation_, ex.getText());
              }
            }
          }
        }

        List<BImplGrammarParser.StatementContext> statement = op.statementList().statement();

        // add instructions 
        for (BImplGrammarParser.StatementContext st : ListSequence.fromList(statement)) {
          SNode newInstruction = evaluateInstruction(st);
          Operation__BehaviorDescriptor.addInstruction_id5vMBZAy7M8e.invoke(operation_, newInstruction);
        }

        // add preconditions and typingPredicates 
        if (operationsTypingParams != null && MapSequence.fromMap(operationsTypingParams).isNotEmpty()) {
          if (MapSequence.fromMap(operationsTypingParams).containsKey(SPropertyOperations.getString(operation_, PROPS.name$MnvL))) {
            List<SNode> listOfTpp = MapSequence.fromMap(operationsTypingParams).get(SPropertyOperations.getString(operation_, PROPS.name$MnvL));
            Operation__BehaviorDescriptor.addAllTypingPredicates_id7HMlmOJW2It.invoke(operation_, listOfTpp);
          }
        }
        if (operationsPredicates != null && MapSequence.fromMap(operationsPredicates).isNotEmpty()) {
          if (MapSequence.fromMap(operationsPredicates).containsKey(SPropertyOperations.getString(operation_, PROPS.name$MnvL))) {
            List<SNode> listOfPrec = MapSequence.fromMap(operationsPredicates).get(SPropertyOperations.getString(operation_, PROPS.name$MnvL));
            Operation__BehaviorDescriptor.addAllPreconditions_id7HMlmOJWIST.invoke(operation_, listOfPrec);
          }
        }

        Machine__BehaviorDescriptor.addOperation_id5vMBZAy8wr2.invoke(machine, operation_);
      }
    }


    return machine;

  }

  public static String readFile(String path) throws Exception {
    try {
      String file = Files.readString(Paths.get(path));
      return file;
    } catch (Exception ex) {
      System.out.println("ERROR : ............FILE READING FAILED IN Function readFile................");
      LoggingRuntime.logMsgView(Level.INFO, "ERROR : ............FILE READING FAILED IN Function readFile...............", Importer.class, null, null);
      throw ex;
    }
  }


  public static SNode evaluateExpressionBis(BPreconditionGrammarParser.ExpressionContext expr) {
    int numChildCount = expr.getChildCount();

    if (numChildCount == 1) {
      if (expr.getText().equals("msg_sender")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc13L, "B.structure.BSender"));
      }
      if (expr.getText().equals("init_msg_sender")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc13L, "B.structure.BSender"));
      }
      if (expr.getText().equals("THIS")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5b77dc1122c9701L, "B.structure.THIS"));
      }
      if (expr.getText().equals("msg_value")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc12L, "B.structure.BValue"));
      }
      if (expr.getText().equals("init_msg_value")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc12L, "B.structure.BValue"));
      }
      if (expr.getText().equals("block_timestamp")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x775e747952e2b190L, "B.structure.block_timestamp"));
      }
      if (expr.getText().equals("init_block_timestamp")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x775e747952e2b190L, "B.structure.block_timestamp"));
      }
      if (expr.getText().equals("addr_0")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x775e747952e6de85L, "B.structure.NullAddress"));
      }
    }
    if (numChildCount == 1 && expr.primaryExpression() != null) {
      SNode expression = evaluatePrimaryExprBis(expr.primaryExpression());
      return expression;
    }
    if (numChildCount == 2) {
      if (expr.getChild(0).getText().equals("-")) {
        SNode innerExpr = evaluateExpressionBis(expr.expression(0));
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1345c017d06d641dL, "B.structure.BNegativeExpression"));
        BNegativeExpression__BehaviorDescriptor.setExpr_id1d5K1vgrmh5.invoke(expression, innerExpr);
        return expression;
      }
      if (expr.getChild(0).getText().equals("not")) {
        SNode innerExpr = evaluateExpressionBis(expr.expression(0));
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756976L, "B.structure.BNotExpression"));
        BNotExpression__BehaviorDescriptor.setExpr_id5vMBZAy6VN7.invoke(expression, innerExpr);
        return expression;
      }
    }
    if (numChildCount == 3) {
      if (expr.getChild(0).getText().equals("(")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x4bf90534ab2ea008L, "B.structure.BParenthesisExpression"));
        SNode innerExpr = evaluateExpressionBis(expr.expression(0));
        BParenthesisExpression__BehaviorDescriptor.setExpr_id4JT1jiFcT35.invoke(expression, innerExpr);
        return expression;
      }
      if (expr.binOp() != null) {
        SNode expression = evaluateBinaryExpressionBis(expr);
        SNode leftExpression = evaluateExpressionBis(expr.expression(0));
        SNode rightExpression = evaluateExpressionBis(expr.expression(1));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(expression, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(expression, rightExpression);
        return expression;
      }
      if (expr.binOp() == null && expr.getChild(1).getText().equals("mod")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1345c017d07fe41bL, "B.structure.BModuloExpression"));
        SNode leftExpression = evaluateExpressionBis(expr.expression(0));
        SNode rightExpression = evaluateExpressionBis(expr.expression(1));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(expression, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(expression, rightExpression);
        return expression;
      }
    }
    if (numChildCount == 4) {
      if (expr.getChild(0).getText().equals("succ")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541b29e2L, "B.structure.succ"));
        SNode innerExpression = evaluateExpressionBis(expr.expression(0));
        succ__BehaviorDescriptor.setExpr_id5vMBZAy73La.invoke(expression, innerExpression);
        return expression;
      } else if (expr.getChild(0).getText().equals("pred")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541ae44fL, "B.structure.pred"));
        SNode innerExpression = evaluateExpressionBis(expr.expression(0));
        pred__BehaviorDescriptor.setExpr_id5vMBZAy73fb.invoke(expression, innerExpression);
        return expression;
      } else if (expr.getChild(0).getText().equals("balanceOf")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6eb31L, "B.structure.BBalanceOf"));
        SNode innerExpression = evaluateExpressionBis(expr.expression(0));
        BBalanceOf__BehaviorDescriptor.setExpr_id5vMBZAy74$9.invoke(expression, innerExpression);
        return expression;
      }

    }
    if (expr.cardinal() != null) {
      LoggingRuntime.logMsgView(Level.INFO, "IN card " + expr.cardinal().expression().getText(), Importer.class, null, null);
      SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7c3774600ea7cb96L, "B.structure.BCardExpression"));
      SNode innerExpression = evaluateExpressionBis(expr.cardinal().expression());
      BCardExpression__BehaviorDescriptor.setExpr_id7KRt60eDWJm.invoke(expression, innerExpression);
      return expression;

    }
    if (expr.field() != null) {
      SNode funcCall = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L, "B.structure.BMappingAccessExpression"));
      BPreconditionGrammarParser.FieldContext field = expr.field();
      BMappingAccessExpression__BehaviorDescriptor.setMappingName_id5vMBZAy6ZI_.invoke(funcCall, field.Identifier().getText());
      List<BPreconditionGrammarParser.ExpressionContext> expressionList = field.expression();
      for (BPreconditionGrammarParser.ExpressionContext expr_ : ListSequence.fromList(expressionList)) {
        SNode expression = evaluateExpressionBis(expr_);
        BMappingAccessExpression__BehaviorDescriptor.addAnt_id5vMBZAy72BM.invoke(funcCall, expression);
      }
      return funcCall;
    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01bL, "B.structure.BSpaceChar"));
  }


  public static SNode evaluateFieldPrec(BPreconditionGrammarParser.FieldContext field) {
    SNode funcCall = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L, "B.structure.BMappingAccessExpression"));
    BMappingAccessExpression__BehaviorDescriptor.setMappingName_id5vMBZAy6ZI_.invoke(funcCall, field.Identifier().getText());
    List<BPreconditionGrammarParser.ExpressionContext> expressionList = field.expression();
    for (BPreconditionGrammarParser.ExpressionContext expr_ : ListSequence.fromList(expressionList)) {
      SNode expression = evaluateExpressionBis(expr_);
      BMappingAccessExpression__BehaviorDescriptor.addAnt_id5vMBZAy72BM.invoke(funcCall, expression);
    }
    return funcCall;
  }

  public List<SNode> initParam(Map<String, String> listOfParams) {
    if (listOfParams != null && !(listOfParams.isEmpty())) {
      List<SNode> initParams = ListSequence.fromList(new ArrayList<SNode>());
      for (IMapping<String, String> pair : MapSequence.fromMap(listOfParams)) {
        SNode tpp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd9L, "B.structure.TypingPredicateParameter"));
        TypingPredicate__BehaviorDescriptor.setName_id5vMBZAy5RAC.invoke(tpp, pair.key());
        SNode evaluateBasicTypeString = evaluateBasicTypeString(pair.value());
        TypingPredicate__BehaviorDescriptor.setSet_id5vMBZAy5UgC.invoke(tpp, evaluateBasicTypeString);
        ListSequence.fromList(initParams).addElement(tpp);
      }
      return initParams;
    }
    return null;
  }


  public static SNode evaluateExpression(BImplGrammarParser.ExpressionContext expr) {
    int numChildCount = expr.getChildCount();
    if (numChildCount == 1) {
      if (expr.getText().equals("msg_sender")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc13L, "B.structure.BSender"));
      }
      if (expr.getText().equals("init_msg_sender")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc13L, "B.structure.BSender"));
      }
      if (expr.getText().equals("THIS")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5b77dc1122c9701L, "B.structure.THIS"));
      }
      if (expr.getText().equals("msg_value")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc12L, "B.structure.BValue"));
      }
      if (expr.getText().equals("init_msg_value")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc12L, "B.structure.BValue"));
      }
      if (expr.getText().equals("block_timestamp")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x775e747952e2b190L, "B.structure.block_timestamp"));
      }
      if (expr.getText().equals("init_block_timestamp")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x775e747952e2b190L, "B.structure.block_timestamp"));
      }
      if (expr.getText().equals("addr_0")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x775e747952e6de85L, "B.structure.NullAddress"));
      }
      if (expr.getText().equals("MAXINT")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1ddd0b4a057a2842L, "B.structure.MAXINT"));
      }
    }
    if (expr.record() != null) {
      SNode record = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5c24adf26bb8813eL, "B.structure.BRecordExpression"));
      for (BImplGrammarParser.ExpressionContext expr_ : ListSequence.fromList(expr.record().expressionList().expression())) {
        SNode recExpr = evaluateExpression(expr_);
        BRecordExpression__BehaviorDescriptor.addExpr_id5K$Fv9FI86f.invoke(record, recExpr);
      }
      return record;
    }
    if (numChildCount == 1 && expr.primaryExpression() != null) {
      LoggingRuntime.logMsgView(Level.INFO, "primary expression = " + expr.primaryExpression().getText(), Importer.class, null, null);
      SNode expression = evaluatePrimaryExpr(expr.primaryExpression());
      return expression;
    }
    if (numChildCount == 2) {
      if (expr.getChild(0).getText().equals("-")) {
        LoggingRuntime.logMsgView(Level.INFO, "- expression = " + expr.getText(), Importer.class, null, null);
        SNode innerExpr = evaluateExpression(expr.expression(0));
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1345c017d06d641dL, "B.structure.BNegativeExpression"));
        BNegativeExpression__BehaviorDescriptor.setExpr_id1d5K1vgrmh5.invoke(expression, innerExpr);
        return expression;
      }
    }
    if (numChildCount == 3) {
      if (expr.getChild(0).getText().equals("(")) {
        LoggingRuntime.logMsgView(Level.INFO, "parenth expression = " + expr.getText(), Importer.class, null, null);

        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x4bf90534ab2ea008L, "B.structure.BParenthesisExpression"));
        SNode innerExpr = evaluateExpression(expr.expression(0));
        BParenthesisExpression__BehaviorDescriptor.setExpr_id4JT1jiFcT35.invoke(expression, innerExpr);
        return expression;
      }
      if (expr.binOp() != null) {
        LoggingRuntime.logMsgView(Level.INFO, "BinOp expression = " + expr.getText(), Importer.class, null, null);
        SNode expression = evaluateBinaryExpression(expr);
        SNode leftExpression = evaluateExpression(expr.expression(0));
        SNode rightExpression = evaluateExpression(expr.expression(1));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(expression, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(expression, rightExpression);
        return expression;
      }
      if (expr.binOp() == null && expr.getChild(1).getText().equals("mod")) {
        LoggingRuntime.logMsgView(Level.INFO, "mod expression = " + expr.primaryExpression().getText(), Importer.class, null, null);
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1345c017d07fe41bL, "B.structure.BModuloExpression"));
        SNode leftExpression = evaluateExpression(expr.expression(0));
        SNode rightExpression = evaluateExpression(expr.expression(1));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(expression, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(expression, rightExpression);
        return expression;
      }
    }
    if (numChildCount == 4) {
      if (expr.getChild(0).getText().equals("succ")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541b29e2L, "B.structure.succ"));
        SNode innerExpression = evaluateExpression(expr.expression(0));
        succ__BehaviorDescriptor.setExpr_id5vMBZAy73La.invoke(expression, innerExpression);
        return expression;
      } else if (expr.getChild(0).getText().equals("pred")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541ae44fL, "B.structure.pred"));
        SNode innerExpression = evaluateExpression(expr.expression(0));
        pred__BehaviorDescriptor.setExpr_id5vMBZAy73fb.invoke(expression, innerExpression);
        return expression;
      } else if (expr.getChild(0).getText().equals("balanceOf")) {
        LoggingRuntime.logMsgView(Level.INFO, "balanceOf expression = " + expr.primaryExpression().getText(), Importer.class, null, null);
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6eb31L, "B.structure.BBalanceOf"));
        SNode innerExpression = evaluateExpression(expr.expression(0));
        BBalanceOf__BehaviorDescriptor.setExpr_id5vMBZAy74$9.invoke(expression, innerExpression);
        return expression;
      } else if (expr.getChild(0).getText().equals("card")) {
        SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7c3774600ea7cb96L, "B.structure.BCardExpression"));
        SNode innerExpression = evaluateExpression(expr.cardinal().expression());
        BCardExpression__BehaviorDescriptor.setExpr_id7KRt60eDWJm.invoke(expression, innerExpression);
        return expression;
      }
    }
    if (expr.bool_eval() != null) {
      SNode expression = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0xfe15e5679b63bd8L, "B.structure.BBoolExpression"));
      SNode innerExpression = evaluateCondition(expr.bool_eval().condition());
      BBoolExpression__BehaviorDescriptor.setExpr_id7oExvB9lB3R.invoke(expression, innerExpression);
      return expression;
    }
    if (expr.field() != null) {
      SNode funcCall = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L, "B.structure.BMappingAccessExpression"));
      BImplGrammarParser.FieldContext field = expr.field();
      String fieldName = clean_i(field.Identifier().getText());
      BMappingAccessExpression__BehaviorDescriptor.setMappingName_id5vMBZAy6ZI_.invoke(funcCall, fieldName);
      List<BImplGrammarParser.ExpressionContext> expressionList = field.expression();
      for (BImplGrammarParser.ExpressionContext expr_ : ListSequence.fromList(expressionList)) {
        SNode expression = evaluateExpression(expr_);
        BMappingAccessExpression__BehaviorDescriptor.addAnt_id5vMBZAy72BM.invoke(funcCall, expression);
      }
      return funcCall;
    }
    SNode noResult = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
    LoggingRuntime.logMsgView(Level.ERROR, "GENERATION FAILED FOR " + expr.getText(), Importer.class, null, null);
    BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(noResult, "Gen failed");
    return noResult;
  }


  public static SNode evaluatePreCondition(BPreconditionGrammarParser.ConditionContext cond) {

    //  parenthesis case 
    int numChildCount = cond.getChildCount();
    if (numChildCount == 5) {
      if (cond.getChild(2).getText().equals("&")) {
        SNode conditionA = evaluatePreCondition(cond.condition(0));
        SNode conditionB = evaluatePreCondition(cond.condition(1));
        SNode andExpr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756970L, "B.structure.BAndExpression"));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(andExpr, conditionA);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(andExpr, conditionB);
        return andExpr;
      }
      if (cond.getChild(2).getText().equals("OR")) {
        SNode conditionA = evaluatePreCondition(cond.condition(0));
        SNode conditionB = evaluatePreCondition(cond.condition(1));
        SNode orExpr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756971L, "B.structure.BOrExpression"));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(orExpr, conditionA);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(orExpr, conditionB);
        return orExpr;
      }
    }
    if (numChildCount == 3 && cond.getChild(0).getText().equals("(") && cond.getChild(2).getText().equals(")")) {
      SNode paren = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x4bf90534ab2ea008L, "B.structure.BParenthesisExpression"));
      SNode inner = evaluatePreCondition(cond.condition(0));
      BParenthesisExpression__BehaviorDescriptor.setExpr_id4JT1jiFcT35.invoke(paren, inner);
      return paren;
    }
    if (cond.expression() != null && (cond.expression().size() == 2)) {
      // case it's expr comparOp expr 
      SNode leftExpression = evaluateExpressionBis(cond.expression(0));
      SNode condition = evaluateCompOperator(cond.compareOp().getText());
      SNode rightExpression = evaluateExpressionBis(cond.expression(1));


      BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(condition, leftExpression);
      BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(condition, rightExpression);
      return condition;
    }
    if (cond.getChild(0).getText().equals("not")) {
      SNode condition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756976L, "B.structure.BNotExpression"));
      SNode innerCondition = evaluatePreCondition(cond.condition(0));
      BNotExpression__BehaviorDescriptor.setExpr_id5vMBZAy6VN7.invoke(condition, innerCondition);
      return condition;
    }
    if (cond.condition().size() == 2) {
      SNode leftExpression = evaluatePreCondition(cond.condition(0));
      SNode rightExpression = evaluatePreCondition(cond.condition(1));
      if (cond.getChild(1).getText().equals("&")) {
        SNode condition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756970L, "B.structure.BAndExpression"));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(condition, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(condition, rightExpression);
        return condition;
      } else if (cond.getChild(1).getText().equals("OR")) {
        SNode condition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756971L, "B.structure.BOrExpression"));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(condition, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(condition, rightExpression);
        return condition;
      }

    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L, "B.structure.BExpression"));
  }



  public static SNode evaluateCondition(BImplGrammarParser.ConditionContext cond) {

    //  parenthesis case 
    if (cond.getChild(0).getText().equals("(") && cond.getChild(2).getText().equals(")")) {
      SNode paren = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x4bf90534ab2ea008L, "B.structure.BParenthesisExpression"));
      SNode inner = evaluateCondition(cond.condition(0));
      BParenthesisExpression__BehaviorDescriptor.setExpr_id4JT1jiFcT35.invoke(paren, inner);
      return paren;
    }
    if (cond.expression() != null && (cond.expression().size() == 2)) {
      // case it's expr comparOp expr 
      SNode leftExpression = evaluateExpression(cond.expression(0));
      SNode condition = evaluateCompOperator(cond.compareOp().getText());
      SNode rightExpression = evaluateExpression(cond.expression(1));
      BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(condition, leftExpression);
      BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(condition, rightExpression);
      return condition;
    }
    if (cond.getChild(0).getText().equals("not")) {
      SNode condition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756976L, "B.structure.BNotExpression"));
      SNode innerCondition = evaluateCondition(cond.condition(0));
      BNotExpression__BehaviorDescriptor.setExpr_id5vMBZAy6VN7.invoke(condition, innerCondition);
      return condition;
    }
    if (cond.condition().size() == 2) {
      SNode leftExpression = evaluateCondition(cond.condition(0));
      SNode rightExpression = evaluateCondition(cond.condition(1));
      if (cond.getChild(1).getText().equals("&")) {
        SNode condition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756970L, "B.structure.BAndExpression"));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(condition, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(condition, rightExpression);
        return condition;
      } else if (cond.getChild(1).getText().equals("OR") || cond.getChild(1).getText().equals("or")) {
        SNode condition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756971L, "B.structure.BOrExpression"));
        BBinaryExpression__BehaviorDescriptor.setLeftExpr_id5vMBZAy6UCq.invoke(condition, leftExpression);
        BBinaryExpression__BehaviorDescriptor.setRightExpr_id5vMBZAy6VeV.invoke(condition, rightExpression);
        return condition;
      }

    }


    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L, "B.structure.BExpression"));
  }

  public static SNode evaluateCompOperator(String operator) {

    switch (operator) {
      case "=":
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698bb42c7L, "B.structure.BEqualExpression"));
      case "/=":
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698d4fe1eL, "B.structure.BInequalExpression"));
      case ">":
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756974L, "B.structure.BGreaterThanExpression"));
      case ">=":
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756975L, "B.structure.BGreaterThanOrEqualExpression"));
      case "<":
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756972L, "B.structure.BLessThanExpression"));
      case "<=":
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756973L, "B.structure.BLessThanOrEqualExpression"));
    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL, "B.structure.BBinaryLogicalExpression"));
  }



  public static SNode evaluateInstruction(BImplGrammarParser.StatementContext input) {
    if (input.assignment() != null && input.assignment().expression().arrayInit() != null) {
      return null;
    }
    if (!((input.assignment() == null))) {
      SNode substitution = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, "B.structure.BecomesSubstitution"));
      SNode expr = evaluateExpression(input.assignment().expression());

      if (input.assignment().lhs().Identifier() != null) {
        SNode identifier = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
        String text = input.assignment().lhs().Identifier().getText();
        text = clean_i(text);
        //  ELSE ==  
        BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(identifier, text);
        BecomesSubstitution__BehaviorDescriptor.setLhs_id5vMBZAy74U5.invoke(substitution, identifier);
      } else if (input.assignment().lhs().field() != null) {
        String clean_i = clean_i(input.assignment().lhs().field().Identifier().getText());
        SNode arrayPushInstr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x659c33bf0c446f47L, "B.structure.BArrayPush"));
        BArrayPush__BehaviorDescriptor.setArrayName_id6mscVWckQuX.invoke(arrayPushInstr, clean_i);
        BArrayPush__BehaviorDescriptor.setExpr_id6mscVWckROr.invoke(arrayPushInstr, expr);
        return arrayPushInstr;
      }

      if (SNodeOperations.isInstanceOf(expr, CONCEPTS.BRecordExpression$nT) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(substitution, LINKS.lhs$AG5Q), CONCEPTS.BIdentifier$nT)) {
        SNode node = ((SNode) expr);
        SNode bid = ((SNode) SLinkOperations.getTarget(substitution, LINKS.lhs$AG5Q));
        SNode recordIntoListofInstruction = recordIntoListofInstruction(node, bid);
        return recordIntoListofInstruction;
      }

      BecomesSubstitution__BehaviorDescriptor.setExpr_id5vMBZAy74R1.invoke(substitution, expr);



      return substitution;
    }
    if (!((input.transferOperation() == null))) {

      SNode substitution = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L, "B.structure.TransferOperation"));
      SNode from = evaluateExpression(input.transferOperation().expression(0));
      SNode to = evaluateExpression(input.transferOperation().expression(1));
      SNode amount = evaluateExpression(input.transferOperation().expression(2));
      TransferOperation__BehaviorDescriptor.setFrom_id5vMBZAy7p0K.invoke(substitution, from);
      TransferOperation__BehaviorDescriptor.setTo_id5vMBZAy7p$k.invoke(substitution, to);
      TransferOperation__BehaviorDescriptor.setAmount_id5vMBZAy7p_Y.invoke(substitution, amount);
      return substitution;
    }
    if (!((input.ifSubstitution() == null))) {

      BImplGrammarParser.IfSubstitutionContext ifInstr = input.ifSubstitution();
      SNode instruction = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, "B.structure.IfInstruction"));
      if (firstOperationIFCLause == 1) {
        firstOperationIFCLause = 0;
        IfInstruction__BehaviorDescriptor.addElseBranchSubstituion_id5vMBZAy7bbp.invoke(instruction, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1ddd0b4a057a2835L, "B.structure.revert")));
      }
      SNode condition = evaluateCondition(ifInstr.condition(0));
      IfInstruction__BehaviorDescriptor.setCondition_id5vMBZAy79If.invoke(instruction, condition);
      List<BImplGrammarParser.StatementContext> statement = ifInstr.statementList(0).statement();
      for (int i = 0; i < statement.size(); i++) {
        SNode innerInstr = evaluateInstruction(statement.get(i));
        IfInstruction__BehaviorDescriptor.addSubstituion_id5vMBZAy79Ir.invoke(instruction, innerInstr);
      }
      if (ifInstr.condition().size() > 1) {
        for (int i = 1; i < ifInstr.condition().size(); i++) {

          SNode elseIf = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1ace29e015cd4415L, "B.structure.ElseIf"));
          SNode innerCondition;
          innerCondition = evaluateCondition(ifInstr.condition(i));
          ElseIf__BehaviorDescriptor.setCondition_id5vMBZAy75w2.invoke(elseIf, innerCondition);
          List<BImplGrammarParser.StatementContext> innerElseIfBlock = ifInstr.statementList(i).statement();
          for (int j = 0; j < innerElseIfBlock.size(); j++) {
            SNode innerInstr = evaluateInstruction(innerElseIfBlock.get(j));
            ElseIf__BehaviorDescriptor.addInstruction_id5vMBZAy763a.invoke(elseIf, innerInstr);
          }
          IfInstruction__BehaviorDescriptor.addElseIfBranch_id5vMBZAy7c6g.invoke(instruction, elseIf);
        }
      }
      if (ifInstr.condition().size() < ifInstr.statementList().size()) {
        BImplGrammarParser.StatementListContext elseBlock = ifInstr.statementList().get(ifInstr.statementList().size() - 1);
        for (int i = 0; i < elseBlock.statement().size(); i++) {
          SNode innerInstr = evaluateInstruction(elseBlock.statement().get(i));
          IfInstruction__BehaviorDescriptor.addElseBranchSubstituion_id5vMBZAy7bbp.invoke(instruction, innerInstr);
        }

      }

      return instruction;
    }
    if (!((input.whileSubstitution() == null))) {
      SNode instruction = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, "B.structure.WhileInstruction"));
      BImplGrammarParser.WhileSubstitutionContext whileSubstitution = input.whileSubstitution();
      SNode condition = evaluateCondition(whileSubstitution.condition());
      WhileInstruction__BehaviorDescriptor.setCondition_id5vMBZAy7pZP.invoke(instruction, condition);
      BImplGrammarParser.StatementListContext statementList = whileSubstitution.statementList();
      List<BImplGrammarParser.StatementContext> statements = statementList.statement();

      for (int i = 0; i < statements.size(); i++) {
        SNode instr = evaluateInstruction(statements.get(i));
        WhileInstruction__BehaviorDescriptor.addInstr_id5vMBZAy7qzB.invoke(instruction, instr);
      }
      return instruction;
    }
    // This following Bit handles the calls to set_<mappingName> instructions 
    if (input.mappingUpdate() != null) {
      SNode bcs = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, "B.structure.BecomesSubstitution"));
      String name = input.mappingUpdate().name.getText().substring(4);
      List<BImplGrammarParser.ExpressionContext> keys = input.mappingUpdate().keys;
      SNode functionCall = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L, "B.structure.BMappingAccessExpression"));
      BMappingAccessExpression__BehaviorDescriptor.setMappingName_id5vMBZAy6ZI_.invoke(functionCall, name);
      for (BImplGrammarParser.ExpressionContext ant : ListSequence.fromList(keys)) {
        SNode evaluateExpression = evaluateExpression(ant);
        BMappingAccessExpression__BehaviorDescriptor.addAnt_id5vMBZAy72BM.invoke(functionCall, evaluateExpression);
      }
      SNode value = evaluateExpression(input.mappingUpdate().value);
      BecomesSubstitution__BehaviorDescriptor.setLhs_id5vMBZAy74U5.invoke(bcs, functionCall);
      BecomesSubstitution__BehaviorDescriptor.setExpr_id5vMBZAy74R1.invoke(bcs, value);
      return bcs;
    }
    if (input.callMappingResult() != null) {
      BImplGrammarParser.CallMappingResultContext cmr = input.callMappingResult();
      if (cmr.mappingGet().Identifier().getText().startsWith("get_") && saveMappingValueType.containsKey(cmr.mappingGet().Identifier().getText().substring(4))) {
        SNode mg = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7923cf0b1219a78L, "B.structure.MappignGet"));
        String functionName = cmr.mappingGet().Identifier().getText();
        functionName = functionName.substring(4);
        MappignGet__BehaviorDescriptor.setSet_iduiff2Le4S8.invoke(mg, SNodeOperations.copyNode(MapSequence.fromMap(saveMappingValueType).get(functionName)));

        MappignGet__BehaviorDescriptor.setId_iduiff2Le4Tj.invoke(mg, cmr.Identifier().getText());

        MappignGet__BehaviorDescriptor.setMapName_iduiff2Le4U2.invoke(mg, functionName);

        List<BImplGrammarParser.ExpressionContext> expression = cmr.mappingGet().expression();
        for (BImplGrammarParser.ExpressionContext expr_ : ListSequence.fromList(expression)) {
          SNode expr = evaluateExpression(expr_);
          MappignGet__BehaviorDescriptor.addValue_iduiff2Le4UZ.invoke(mg, expr);
        }

        return mg;

      } else if (cmr.mappingGet().Identifier().getText().startsWith("get_") && cmr.mappingGet().Identifier().getText().substring(4).equals("balanceOf")) {
        SNode balanceOf = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6eb31L, "B.structure.BBalanceOf"));
        SNode becomeSub = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, "B.structure.BecomesSubstitution"));
        SNode vardec = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0xc5014708ec95bc6L, "B.structure.BVarDec"));
        SNode evaluateExpression = evaluateExpression(cmr.mappingGet().expression(0));
        BVarDec__BehaviorDescriptor.setSet_idLg572eMqmE.invoke(vardec, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural")));
        BVarDec__BehaviorDescriptor.setId_id7oExvB9u5M3.invoke(vardec, cmr.Identifier().getText());
        BBalanceOf__BehaviorDescriptor.setExpr_id5vMBZAy74$9.invoke(balanceOf, evaluateExpression);
        BecomesSubstitution__BehaviorDescriptor.setExpr_id5vMBZAy74R1.invoke(becomeSub, balanceOf);
        BecomesSubstitution__BehaviorDescriptor.setLhs_id5vMBZAy74U5.invoke(becomeSub, vardec);
        return becomeSub;
      } else {
        SNode bOpCall = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd130eaaL, "B.structure.BOperationCall"));
        SNode fc = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd1487b1L, "B.structure.BFunctionCall"));
        BOperationCall__BehaviorDescriptor.setVarName_id2zX142X9hUS.invoke(bOpCall, cmr.Identifier().getText());
        BFunctionCall__BehaviorDescriptor.setFunctionName_id2zX142X58vQ.invoke(fc, cmr.mappingGet().Identifier().getText());
        List<BImplGrammarParser.ExpressionContext> expression = cmr.mappingGet().expression();
        for (BImplGrammarParser.ExpressionContext expr_ : ListSequence.fromList(expression)) {
          SNode expr = evaluateExpression(expr_);
          BFunctionCall__BehaviorDescriptor.addExpr_id2zX142X5aDF.invoke(fc, expr);
        }
        BOperationCall__BehaviorDescriptor.setFunction_id2mhMzvQx9SZ.invoke(bOpCall, fc);

        return bOpCall;
      }
    }
    if (input.typedVariable() != null) {
      SNode bVarDec = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6f7adc3593a02b96L, "B.structure.BVarDeclaration"));
      SNode set = evaluateBType(input.typedVariable().typingPredicate().type());
      BVarDeclaration__BehaviorDescriptor.setSet_id6XUR3mjC5Hf.invoke(bVarDec, set);
      BVarDeclaration__BehaviorDescriptor.setName_id6XUR3mjC2Js.invoke(bVarDec, input.typedVariable().typingPredicate().Identifier().getText());
      return bVarDec;
    }
    if (input.varIn() != null) {
      List<TerminalNode> identifiers = input.varIn().identifierList().Identifier();
      SNode varIn = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7923cf0b1219a72L, "B.structure.VarIn"));
      if (identifiers != null && !(identifiers.isEmpty())) {
        for (TerminalNode id : ListSequence.fromList(identifiers)) {
          VarIn__BehaviorDescriptor.addId_iduiff2LbgAq.invoke(varIn, id.getText());
        }
      }
      if (input.varIn().statementList() != null) {
        List<BImplGrammarParser.StatementContext> statement = input.varIn().statementList().statement();
        if (statement != null && !(statement.isEmpty())) {
          for (BImplGrammarParser.StatementContext st : ListSequence.fromList(statement)) {
            SNode evaluateInstruction = evaluateInstruction(st);
            VarIn__BehaviorDescriptor.addInstr_iduiff2LaL4v.invoke(varIn, evaluateInstruction);
          }
        }
      }
      return varIn;
    }
    LoggingRuntime.logMsgView(Level.ERROR, "FAILED GENERATION FOR ELEMENT =" + input.getText(), Importer.class, null, null);
    return null;
  }



  public static SNode recordIntoListofInstruction(SNode record, SNode lhs) {
    SNode instrs = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x4315e5479d1b2c67L, "B.structure.InstructionList"));
    if (structureMembers.containsKey(SPropertyOperations.getString(lhs, PROPS.name$MnvL))) {
      List<String> members = structureMembers.get(SPropertyOperations.getString(lhs, PROPS.name$MnvL));
      int i = 0;
      SNode sub = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, "B.structure.BecomesSubstitution"));
      for (SNode expr : ListSequence.fromList(SLinkOperations.getChildren(record, LINKS.expressions$EllV))) {
        BecomesSubstitution__BehaviorDescriptor.setExpr_id5vMBZAy74R1.invoke(sub, expr);
        SNode newLhs = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5c24adf26bc18fa1L, "B.structure.BStructMemberAccess"));
        BStructMemberAccess__BehaviorDescriptor.setStructName_id5K$Fv9FKoZp.invoke(newLhs, SPropertyOperations.getString(lhs, PROPS.name$MnvL));
        BStructMemberAccess__BehaviorDescriptor.setMemberName_id5K$Fv9FKqGS.invoke(newLhs, ListSequence.fromList(members).getElement(i));
        BecomesSubstitution__BehaviorDescriptor.setLhs_id5vMBZAy74U5.invoke(sub, newLhs);
      }
      InstructionList__BehaviorDescriptor.addInstruction_id4clTkut6MMa.invoke(instrs, sub);
    }
    return instrs;
  }



  public static SNode evaluateBasicTypeString(String basicType) {
    if (basicType != null) {
      switch (basicType) {
        case "INT":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781277L, "B.structure.BInteger"));
        case "NAT":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
        case "NAT1":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
        case "BOOL":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127bL, "B.structure.BBool"));
        case "STRINGS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127cL, "B.structure.BString"));
        case "USERS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
        case "ADDRESS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
        case "BYTES":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781279L, "B.structure.BBytes"));
      }
    }
    LoggingRuntime.logMsgView(Level.ERROR, "TYPE DIDN't MATCH WITH ANY POSSIBILITIES", Importer.class, null, null);
    System.err.print("TYPE DIDN't MATCH WITH ANY POSSIBILITIES");
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));

  }


  public static SNode evaluateBasicTypePrec(BPreconditionGrammarParser.BasicTypeContext basicType) {
    if (basicType != null && !(basicType.isEmpty())) {
      switch (basicType.getText()) {
        case "INT":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781277L, "B.structure.BInteger"));
        case "NAT":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
        case "NAT1":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
        case "BOOL":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127bL, "B.structure.BBool"));
        case "STRINGS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127cL, "B.structure.BString"));
        case "USERS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
        case "ADDRESS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
        case "BYTES":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781279L, "B.structure.BBytes"));
      }
    }
    LoggingRuntime.logMsgView(Level.ERROR, "TYPE DIDN't MATCH WITH ANY POSSIBILITIES", Importer.class, null, null);
    System.err.print("TYPE DIDN't MATCH WITH ANY POSSIBILITIES");
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));

  }



  public static SNode evaluateBasicType(BFunctionTypeGrammarParser.BasicTypeContext basicType) {
    if (basicType != null && !(basicType.isEmpty())) {
      switch (basicType.getText()) {
        case "INT":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781277L, "B.structure.BInteger"));
        case "NAT":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
        case "NAT1":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
        case "BOOL":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127bL, "B.structure.BBool"));
        case "STRINGS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127cL, "B.structure.BString"));
        case "USERS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
        case "ADDRESS":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
        case "BYTES":
          return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781279L, "B.structure.BBytes"));
      }
    }
    LoggingRuntime.logMsgView(Level.ERROR, "TYPE DIDN't MATCH WITH ANY POSSIBILITIES", Importer.class, null, null);
    System.err.print("TYPE DIDN't MATCH WITH ANY POSSIBILITIES");
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));

  }




  public static SNode evaluateBType(BImplGrammarParser.TypeContext type) {
    if (type != null) {
      if (type.basicType() != null && !(type.basicType().isEmpty())) {
        switch (type.basicType().getText()) {
          case "INT":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781277L, "B.structure.BInteger"));
          case "NAT":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
          case "NAT1":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
          case "BOOL":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127bL, "B.structure.BBool"));
          case "STRINGS":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127cL, "B.structure.BString"));
          case "USERS":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
          case "ADDRESS":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL, "B.structure.BAddress"));
          case "BYTES":
            return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781279L, "B.structure.BBytes"));
        }
      }
      if (type.arrayType() != null && !(type.arrayType().isEmpty())) {
        SNode arrayType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x4e0a79736b1af681L, "B.structure.BArrayType"));
        SNode arrayComponentType = evaluateBType(type.arrayType().type());
        BArrayType__BehaviorDescriptor.setSet_id4SaundF6KnJ.invoke(arrayType, arrayComponentType);
        return arrayType;
      }
      if (type.userDefinedType() != null && !(type.userDefinedType().isEmpty())) {

        if (type.userDefinedType().structType() != null && !(type.userDefinedType().structType().isEmpty())) {

          SNode struct = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L, "B.structure.StructSet"));
          int max = type.userDefinedType().structType().typingPredicate().size();
          for (int i = 0; i < max; i++) {
            String name = type.userDefinedType().structType().typingPredicate().get(i).Identifier().getText();
            SNode set = evaluateBType(type.userDefinedType().structType().typingPredicate().get(i).type());

            StructSet__BehaviorDescriptor.addElement_id5vMBZAy63e$.invoke(struct, name, set);
          }
          return struct;
        }

        if (type.userDefinedType().Identifier() != null) {
          SNode set = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127dL, "B.structure.userDefinedSet"));
          userDefinedSet__BehaviorDescriptor.setName_id5vMBZAy7YmO.invoke(set, type.userDefinedType().Identifier().getText());
          return set;
        }
      }

    }
    System.err.print("TYPE DIDN't MATCH WITH ANY POSSIBILITIES");
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L, "B.structure.BNatural"));
  }




  public static SNode evaluatePrimaryExprBis(BPreconditionGrammarParser.PrimaryExpressionContext ctx) {
    if (ctx.Boolean_lit() != null) {
      if (ctx.Boolean_lit().getText().equals("TRUE")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696aL, "B.structure.BTrueExpression"));
      } else {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696bL, "B.structure.BFalseExpression"));
      }
    }
    if (ctx.Identifier() != null) {
      SNode ident = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
      BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(ident, ctx.Identifier().getText());
      SNode exprr = checkIfEnumMember(ident);
      return exprr;
    }
    if (ctx.INT() != null) {
      SNode value = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a015L, "B.structure.BIntegerLiteral"));
      SPropertyOperations.assign(value, PROPS.value$HeKV, ctx.INT().getText());
      return value;
    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L, "B.structure.BExpression"));
  }


  public static SNode evaluatePrimaryExpr(BImplGrammarParser.PrimaryExpressionContext ctx) {
    if (ctx.Boolean_lit() != null) {
      if (ctx.Boolean_lit().getText().equals("TRUE")) {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696aL, "B.structure.BTrueExpression"));
      } else {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696bL, "B.structure.BFalseExpression"));
      }
    }
    if (ctx.Identifier() != null) {
      SNode ident = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
      BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(ident, ctx.Identifier().getText());
      ident = clean_i(ident);
      SNode exprr = checkIfEnumMember(ident);
      return exprr;
    }
    if (ctx.INT() != null) {
      SNode value = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a015L, "B.structure.BIntegerLiteral"));
      SPropertyOperations.assign(value, PROPS.value$HeKV, ctx.INT().getText());
      return value;
    }
    return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L, "B.structure.BExpression"));
  }


  public static SNode evaluateBinaryExpression(BImplGrammarParser.ExpressionContext expr) {

    if (expr.getChild(1).getText().equals("+")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696cL, "B.structure.BPlusExpression"));
    } else if (expr.getChild(1).getText().equals("-")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696dL, "B.structure.BMinusExpression"));
    } else if (expr.getChild(1).getText().equals("/")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696fL, "B.structure.BDivExpression"));
    } else if (expr.getChild(1).getText().equals("*")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696eL, "B.structure.BMultExpression"));
    } else if (expr.getChild(1).getText().equals("**")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1345c017d07ab616L, "B.structure.BPowerExpression"));
    }

    return null;
  }


  public static SNode evaluateBinaryExpressionBis(BPreconditionGrammarParser.ExpressionContext expr) {

    if (expr.getChild(1).getText().equals("+")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696cL, "B.structure.BPlusExpression"));
    } else if (expr.getChild(1).getText().equals("-")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696dL, "B.structure.BMinusExpression"));
    } else if (expr.getChild(1).getText().equals("/")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696fL, "B.structure.BDivExpression"));
    } else if (expr.getChild(1).getText().equals("*")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696eL, "B.structure.BMultExpression"));
    } else if (expr.getChild(1).getText().equals("**")) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1345c017d07ab616L, "B.structure.BPowerExpression"));
    }

    return null;
  }


  public static SNode evaluateField(BImplGrammarParser.FieldContext field) {
    List<BImplGrammarParser.ExpressionContext> expressionList = field.expression();
    String fieldName = clean_i(field.Identifier().getText());
    SNode mapping = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L, "B.structure.BMappingAccessExpression"));
    BMappingAccessExpression__BehaviorDescriptor.setMappingName_id5vMBZAy6ZI_.invoke(mapping, fieldName);
    for (BImplGrammarParser.ExpressionContext expr_ : ListSequence.fromList(expressionList)) {
      SNode expression = evaluateExpression(expr_);
      BMappingAccessExpression__BehaviorDescriptor.addAnt_id5vMBZAy72BM.invoke(mapping, expression);
    }
    return mapping;

  }



  private static SNode clean_i(SNode id) {
    if (SPropertyOperations.getString(id, PROPS.name$MnvL).length() > 2) {
      String substring = SPropertyOperations.getString(id, PROPS.name$MnvL).substring(SPropertyOperations.getString(id, PROPS.name$MnvL).length() - 2, SPropertyOperations.getString(id, PROPS.name$MnvL).length());
      if (substring.equals("_i")) {
        SNode nId = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
        String newString = SPropertyOperations.getString(id, PROPS.name$MnvL).substring(0, SPropertyOperations.getString(id, PROPS.name$MnvL).length() - 2);
        BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(nId, newString);
        return nId;
      }
    }
    return id;
  }

  private static String clean_i(String id) {
    if (id.length() > 2) {
      String substring = id.substring(id.length() - 2, id.length());
      if (substring.equals("_i")) {
        String nId = id.substring(0, id.length() - 2);
        return nId;
      }
    }
    return id;
  }

  public static SNode checkIfEnumMember(SNode id) {
    for (SNode enl : ListSequence.fromList(enumList)) {
      for (SNode member : ListSequence.fromList(SLinkOperations.getChildren(enl, LINKS.elements$zdCX))) {
        if (SPropertyOperations.getString(id, PROPS.name$MnvL).equals(SPropertyOperations.getString(member, PROPS.name$MnvL))) {
          SNode em = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d37e504154a2cdbL, "B.structure.enumMember"));
          enumMember__BehaviorDescriptor.setEnumName_id7ORTgglogUl.invoke(em, SPropertyOperations.getString(enl, PROPS.name$MnvL));
          enumMember__BehaviorDescriptor.setEnumMember_id7ORTgglogVg.invoke(em, SPropertyOperations.getString(id, PROPS.name$MnvL));
          return em;
        }
      }
    }
    return id;
  }

  public static SNode evalFunctionType(BFunctionTypeGrammarParser.FunctionTypeContext func) {
    SNode funcType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c784996L, "B.structure.Function"));
    SNode domain = evaluateBasicTypeString(func.domain.getText());
    Function__BehaviorDescriptor.setAntecedant_id5vMBZAy8BDl.invoke(funcType, domain);
    SNode ret = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L, "B.structure.Set"));
    if (func.rangeF != null) {
      ret = evalFunctionType(func.rangeF);
    }
    if (func.rangeB != null) {
      ret = evaluateBasicTypeString(func.rangeB.getText());
    }
    Function__BehaviorDescriptor.setImage_id5vMBZAy8Cbn.invoke(funcType, ret);

    return funcType;
  }


  public static SNode wdpropertiesEvaluator(BPreconditionGrammarParser.WelldefinednessContext wd) {

    SNode pred = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4eL, "B.structure.Predicate"));
    List<BPreconditionGrammarParser.MemberContext> member = wd.member();
    SNode expr_ = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L, "B.structure.BExpression"));
    if (member.get(0).Identifier() != null) {
      String text = member.get(0).Identifier().getText();
      expr_ = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
    } else if (member.get(0).field() != null) {
      BPreconditionGrammarParser.FieldContext field = member.get(0).field();

    }



    return pred;
  }

  public static SNode readFunctionType(String file) throws Exception {

    SNode mappingVar = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd7L, "B.structure.TypingPredicateInvariant"));
    BFunctionTypeListener funcType = BParserInteface.readFunctionTypeMachine(file);

    TypingPredicate__BehaviorDescriptor.setName_id5vMBZAy5RAC.invoke(mappingVar, funcType.getIdentifier());

    SNode evalFunctionType = evalFunctionType(funcType.getFunctionType());

    MapSequence.fromMap(Importer.saveMappingValueType).put(funcType.getIdentifier(), SNodeOperations.copyNode(Function__BehaviorDescriptor.getLastValueType_id61rtTJfm4Jo.invoke(evalFunctionType)));

    TypingPredicate__BehaviorDescriptor.setSet_id5vMBZAy5UgC.invoke(mappingVar, evalFunctionType);

    return mappingVar;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink name$3HGV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL, 0x7d382cf97c78126eL, "name");
    /*package*/ static final SContainmentLink elements$ppwr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L, 0x3d1067ce4782bb4aL, "elements");
    /*package*/ static final SContainmentLink lhs$AG5Q = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, 0x7d382cf97c7d3d0cL, "lhs");
    /*package*/ static final SContainmentLink expressions$EllV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5c24adf26bb8813eL, 0x5c24adf26bb8813fL, "expressions");
    /*package*/ static final SContainmentLink elements$zdCX = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c774b48L, 0x7d382cf97c774b4bL, "elements");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BArrayType$5m = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x4e0a79736b1af681L, "B.structure.BArrayType");
    /*package*/ static final SConcept StructSet$we = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L, "B.structure.StructSet");
    /*package*/ static final SConcept BRecordExpression$nT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5c24adf26bb8813eL, "B.structure.BRecordExpression");
    /*package*/ static final SConcept BIdentifier$nT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$HeKV = MetaAdapterFactory.getProperty(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a015L, 0x7d382cf97c75a016L, "value");
  }
}
