package B.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import B.generator.generator.util.Util;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_0_0(final BaseMappingRuleContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL).contains("_payable");
  }
  public static boolean rule_Condition_0_1(final BaseMappingRuleContext _context) {
    return !(SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL).contains("_payalbe"));
  }
  public static boolean rule_Condition_4_0(final BaseMappingRuleContext _context) {
    return !(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.ElseBranch$4DVm)).isEmpty());
  }
  public static boolean rule_Condition_4_1(final BaseMappingRuleContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.ElseBranch$4DVm)).isEmpty();
  }
  public static boolean rule_Condition_5_0(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO), CONCEPTS.StructSet$we);
  }
  public static boolean rule_Condition_5_1(final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO), CONCEPTS.StructSet$we));
  }
  public static Object propertyMacro_GetValue_0_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_0_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), PROPS.value$HeKV);
  }
  public static Object propertyMacro_GetValue_2_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.value$Hfvr);
  }
  public static Object propertyMacro_GetValue_5_0(final PropertyMacroContext _context) {
    SNode set = ((SNode) SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO));
    return Util.getName(set);
  }
  public static Object propertyMacro_GetValue_6_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_6_1(final PropertyMacroContext _context) {
    return Util.setName(_context.getNode());
  }
  public static Object propertyMacro_GetValue_8_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_9_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_10_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static boolean ifMacro_Condition_5_0(final IfMacroContext _context) {
    SNode set = ((SNode) SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO));
    return !(Util.checkIfSetExists(set));
  }
  public static SNode sourceNodeQuery_0_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.set$dDCX);
  }
  public static SNode sourceNodeQuery_0_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.value$dE6Z);
  }
  public static SNode sourceNodeQuery_0_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$PKyr);
  }
  public static SNode sourceNodeQuery_1_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.initialisation$GunN);
  }
  public static SNode sourceNodeQuery_2_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$4fxV);
  }
  public static SNode sourceNodeQuery_2_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$rNAV);
  }
  public static SNode sourceNodeQuery_2_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$1jbr);
  }
  public static SNode sourceNodeQuery_3_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_10(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_11(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_12(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_13(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_14(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_15(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_16(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_17(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_18(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_19(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_20(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_21(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_22(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$465r);
  }
  public static SNode sourceNodeQuery_3_23(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$46zt);
  }
  public static SNode sourceNodeQuery_3_24(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.function$uhoH);
  }
  public static SNode sourceNodeQuery_3_25(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.antecedant$uhQJ);
  }
  public static SNode sourceNodeQuery_4_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.lhs$AG5Q);
  }
  public static SNode sourceNodeQuery_4_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$AGzS);
  }
  public static SNode sourceNodeQuery_4_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$PSJv);
  }
  public static SNode sourceNodeQuery_4_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$PSJv);
  }
  public static SNode sourceNodeQuery_4_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$RlMr);
  }
  public static SNode sourceNodeQuery_4_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.to$g5So);
  }
  public static SNode sourceNodeQuery_4_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.amount$g6_r);
  }
  public static SNode sourceNodeQuery_5_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$3HGV);
  }
  public static SNode sourceNodeQuery_5_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO);
  }
  public static SNode sourceNodeQuery_5_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO);
  }
  public static SNode sourceNodeQuery_5_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$3HGV);
  }
  public static SNode sourceNodeQuery_5_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO);
  }
  public static SNode sourceNodeQuery_5_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$3HGV);
  }
  public static SNode sourceNodeQuery_5_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$3HGV);
  }
  public static SNode sourceNodeQuery_5_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO);
  }
  public static SNode sourceNodeQuery_6_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.keyType$LiYr);
  }
  public static SNode sourceNodeQuery_6_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.valueType$Ljst);
  }
  public static SNode sourceNodeQuery_7_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$Bgnm);
  }
  public static SNode sourceNodeQuery_8_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$PKyr);
  }
  public static SNode sourceNodeQuery_8_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$3HGV);
  }
  public static SNode sourceNodeQuery_8_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO);
  }
  public static SNode sourceNodeQuery_9_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$PKyr);
  }
  public static SNode sourceNodeQuery_9_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$3HGV);
  }
  public static SNode sourceNodeQuery_9_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.set$YcdO);
  }
  public static SNode sourceNodeQuery_10_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.function$uhoH);
  }
  public static SNode sourceNodeQuery_10_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.antecedant$uhQJ);
  }
  public static Iterable<SNode> sourceNodesQuery_0_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.elements$zdCX);
  }
  public static Iterable<SNode> sourceNodesQuery_0_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.body$aE2);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.enumeratedSets$38PV);
  }
  public static Iterable<SNode> sourceNodesQuery_1_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.values$zTxQ);
  }
  public static Iterable<SNode> sourceNodesQuery_1_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.invariant$k4Kh);
  }
  public static Iterable<SNode> sourceNodesQuery_1_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.operations$pJKb);
  }
  public static Iterable<SNode> sourceNodesQuery_4_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.IfTrueBranch$4$iY);
  }
  public static Iterable<SNode> sourceNodesQuery_4_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.ElseBranch$4DVm);
  }
  public static Iterable<SNode> sourceNodesQuery_4_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.IfTrueBranch$4$iY);
  }
  public static Iterable<SNode> sourceNodesQuery_4_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.body$Rmgt);
  }
  public static Iterable<SNode> sourceNodesQuery_4_4(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.expressions$kezt);
  }
  public static Iterable<SNode> sourceNodesQuery_6_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.elements$ppwr);
  }
  public static Iterable<SNode> sourceNodesQuery_8_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.preconditions$4p39);
  }
  public static Iterable<SNode> sourceNodesQuery_8_1(final SourceSubstituteMacroNodesContext _context) {
    for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z))) {
      if (SNodeOperations.isInstanceOf(e, CONCEPTS.TransferOperation$Fn) & SNodeOperations.isInstanceOf(SNodeOperations.getParent(e), CONCEPTS.Operation$W_)) {
        ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z)).removeElement(e);
        ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z)).addElement(e);
      }
    }
    return SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z);
  }
  public static Iterable<SNode> sourceNodesQuery_8_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.typingPredicates$4o75);
  }
  public static Iterable<SNode> sourceNodesQuery_9_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.preconditions$4p39);
  }
  public static Iterable<SNode> sourceNodesQuery_9_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.typingPredicates$4o75);
  }
  public static Iterable<SNode> sourceNodesQuery_9_2(final SourceSubstituteMacroNodesContext _context) {
    for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z))) {
      if (SNodeOperations.isInstanceOf(e, CONCEPTS.TransferOperation$Fn) & SNodeOperations.isInstanceOf(SNodeOperations.getParent(e), CONCEPTS.Operation$W_)) {
        ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z)).removeElement(e);
        ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z)).addElement(e);
      }
    }
    return SLinkOperations.getChildren(_context.getNode(), LINKS.body$4v9z);
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("7870468911825893668", new RRC(i++));
    rrcMethods.put("7211950056783768874", new RRC(i++));
    rrcMethods.put("1931527332605706632", new RRC(i++));
    rrcMethods.put("1931527332605721301", new RRC(i++));
    rrcMethods.put("6941111777067806650", new RRC(i++));
    rrcMethods.put("7870468911825732444", new RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    ReductionRuleCondition query = identity.forTemplateNode(rrcMethods);
    return (query != null ? query : super.getReductionRuleCondition(identity));
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_0_1(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_4_0(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_4_1(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_5_0(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_5_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("7123863211782976017", new SNQ(i++));
    snqMethods.put("7123863211782975351", new SNQ(i++));
    snqMethods.put("3015080260871801629", new SNQ(i++));
    snqMethods.put("1931527332607838489", new SNQ(i++));
    snqMethods.put("7870468911821203576", new SNQ(i++));
    snqMethods.put("2465839268232110400", new SNQ(i++));
    snqMethods.put("2465839268232110606", new SNQ(i++));
    snqMethods.put("7870468911821204293", new SNQ(i++));
    snqMethods.put("7870468911821204618", new SNQ(i++));
    snqMethods.put("7870468911821204978", new SNQ(i++));
    snqMethods.put("7870468911821205184", new SNQ(i++));
    snqMethods.put("7870468911821205390", new SNQ(i++));
    snqMethods.put("7870468911821205715", new SNQ(i++));
    snqMethods.put("7870468911821205850", new SNQ(i++));
    snqMethods.put("7870468911821206175", new SNQ(i++));
    snqMethods.put("7870468911821240613", new SNQ(i++));
    snqMethods.put("7870468911821240938", new SNQ(i++));
    snqMethods.put("7870468911821241111", new SNQ(i++));
    snqMethods.put("7870468911821241436", new SNQ(i++));
    snqMethods.put("7870468911821241629", new SNQ(i++));
    snqMethods.put("7870468911821241954", new SNQ(i++));
    snqMethods.put("7870468911821242176", new SNQ(i++));
    snqMethods.put("7870468911821242501", new SNQ(i++));
    snqMethods.put("7870468911821243062", new SNQ(i++));
    snqMethods.put("7870468911821243387", new SNQ(i++));
    snqMethods.put("7870468911821243636", new SNQ(i++));
    snqMethods.put("7870468911821243961", new SNQ(i++));
    snqMethods.put("7870468911821429140", new SNQ(i++));
    snqMethods.put("7870468911821429346", new SNQ(i++));
    snqMethods.put("7123863211780357381", new SNQ(i++));
    snqMethods.put("7123863211780357716", new SNQ(i++));
    snqMethods.put("7123863211779701615", new SNQ(i++));
    snqMethods.put("7123863211779701677", new SNQ(i++));
    snqMethods.put("7870468911821434519", new SNQ(i++));
    snqMethods.put("7870468911821434844", new SNQ(i++));
    snqMethods.put("1931527332605706718", new SNQ(i++));
    snqMethods.put("1931527332605721306", new SNQ(i++));
    snqMethods.put("3015080260872481386", new SNQ(i++));
    snqMethods.put("4400130971600485438", new SNQ(i++));
    snqMethods.put("4400130971601177363", new SNQ(i++));
    snqMethods.put("7123863211783281605", new SNQ(i++));
    snqMethods.put("7123863211783281290", new SNQ(i++));
    snqMethods.put("6941111777071194065", new SNQ(i++));
    snqMethods.put("6941111777068787371", new SNQ(i++));
    snqMethods.put("7123863211783883792", new SNQ(i++));
    snqMethods.put("7123863211783883467", new SNQ(i++));
    snqMethods.put("7123863211783883083", new SNQ(i++));
    snqMethods.put("7123863211783882768", new SNQ(i++));
    snqMethods.put("7870468911822780255", new SNQ(i++));
    snqMethods.put("7870468911822780570", new SNQ(i++));
    snqMethods.put("7123863211782676926", new SNQ(i++));
    snqMethods.put("7123863211778720197", new SNQ(i++));
    snqMethods.put("1931527332608088770", new SNQ(i++));
    snqMethods.put("1931527332608088778", new SNQ(i++));
    snqMethods.put("7123863211778714254", new SNQ(i++));
    snqMethods.put("7222035348494302904", new SNQ(i++));
    snqMethods.put("7222035348494301974", new SNQ(i++));
    snqMethods.put("7123863211779703041", new SNQ(i++));
    snqMethods.put("7123863211779703367", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    SourceNodeQuery query = identity.forFunctionNode(snqMethods);
    return (query != null ? query : super.getSourceNodeQuery(identity));
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_0_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_0_1(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_0_2(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_1_0(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_2_0(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_2_1(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_2_2(ctx);
        case 7:
          return QueriesGenerated.sourceNodeQuery_3_0(ctx);
        case 8:
          return QueriesGenerated.sourceNodeQuery_3_1(ctx);
        case 9:
          return QueriesGenerated.sourceNodeQuery_3_2(ctx);
        case 10:
          return QueriesGenerated.sourceNodeQuery_3_3(ctx);
        case 11:
          return QueriesGenerated.sourceNodeQuery_3_4(ctx);
        case 12:
          return QueriesGenerated.sourceNodeQuery_3_5(ctx);
        case 13:
          return QueriesGenerated.sourceNodeQuery_3_6(ctx);
        case 14:
          return QueriesGenerated.sourceNodeQuery_3_7(ctx);
        case 15:
          return QueriesGenerated.sourceNodeQuery_3_8(ctx);
        case 16:
          return QueriesGenerated.sourceNodeQuery_3_9(ctx);
        case 17:
          return QueriesGenerated.sourceNodeQuery_3_10(ctx);
        case 18:
          return QueriesGenerated.sourceNodeQuery_3_11(ctx);
        case 19:
          return QueriesGenerated.sourceNodeQuery_3_12(ctx);
        case 20:
          return QueriesGenerated.sourceNodeQuery_3_13(ctx);
        case 21:
          return QueriesGenerated.sourceNodeQuery_3_14(ctx);
        case 22:
          return QueriesGenerated.sourceNodeQuery_3_15(ctx);
        case 23:
          return QueriesGenerated.sourceNodeQuery_3_16(ctx);
        case 24:
          return QueriesGenerated.sourceNodeQuery_3_17(ctx);
        case 25:
          return QueriesGenerated.sourceNodeQuery_3_18(ctx);
        case 26:
          return QueriesGenerated.sourceNodeQuery_3_19(ctx);
        case 27:
          return QueriesGenerated.sourceNodeQuery_3_20(ctx);
        case 28:
          return QueriesGenerated.sourceNodeQuery_3_21(ctx);
        case 29:
          return QueriesGenerated.sourceNodeQuery_3_22(ctx);
        case 30:
          return QueriesGenerated.sourceNodeQuery_3_23(ctx);
        case 31:
          return QueriesGenerated.sourceNodeQuery_3_24(ctx);
        case 32:
          return QueriesGenerated.sourceNodeQuery_3_25(ctx);
        case 33:
          return QueriesGenerated.sourceNodeQuery_4_0(ctx);
        case 34:
          return QueriesGenerated.sourceNodeQuery_4_1(ctx);
        case 35:
          return QueriesGenerated.sourceNodeQuery_4_2(ctx);
        case 36:
          return QueriesGenerated.sourceNodeQuery_4_3(ctx);
        case 37:
          return QueriesGenerated.sourceNodeQuery_4_4(ctx);
        case 38:
          return QueriesGenerated.sourceNodeQuery_4_5(ctx);
        case 39:
          return QueriesGenerated.sourceNodeQuery_4_6(ctx);
        case 40:
          return QueriesGenerated.sourceNodeQuery_5_0(ctx);
        case 41:
          return QueriesGenerated.sourceNodeQuery_5_1(ctx);
        case 42:
          return QueriesGenerated.sourceNodeQuery_5_2(ctx);
        case 43:
          return QueriesGenerated.sourceNodeQuery_5_3(ctx);
        case 44:
          return QueriesGenerated.sourceNodeQuery_5_4(ctx);
        case 45:
          return QueriesGenerated.sourceNodeQuery_5_5(ctx);
        case 46:
          return QueriesGenerated.sourceNodeQuery_5_6(ctx);
        case 47:
          return QueriesGenerated.sourceNodeQuery_5_7(ctx);
        case 48:
          return QueriesGenerated.sourceNodeQuery_6_0(ctx);
        case 49:
          return QueriesGenerated.sourceNodeQuery_6_1(ctx);
        case 50:
          return QueriesGenerated.sourceNodeQuery_7_0(ctx);
        case 51:
          return QueriesGenerated.sourceNodeQuery_8_0(ctx);
        case 52:
          return QueriesGenerated.sourceNodeQuery_8_1(ctx);
        case 53:
          return QueriesGenerated.sourceNodeQuery_8_2(ctx);
        case 54:
          return QueriesGenerated.sourceNodeQuery_9_0(ctx);
        case 55:
          return QueriesGenerated.sourceNodeQuery_9_1(ctx);
        case 56:
          return QueriesGenerated.sourceNodeQuery_9_2(ctx);
        case 57:
          return QueriesGenerated.sourceNodeQuery_10_0(ctx);
        case 58:
          return QueriesGenerated.sourceNodeQuery_10_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("7870468911822615938", new SNsQ(i++));
    snsqMethods.put("7222035348493988825", new SNsQ(i++));
    snsqMethods.put("7870468911828088173", new SNsQ(i++));
    snsqMethods.put("7123863211782968017", new SNsQ(i++));
    snsqMethods.put("7870468911828088812", new SNsQ(i++));
    snsqMethods.put("7870468911828091226", new SNsQ(i++));
    snsqMethods.put("7123863211779354836", new SNsQ(i++));
    snsqMethods.put("7123863211779355087", new SNsQ(i++));
    snsqMethods.put("7123863211779338052", new SNsQ(i++));
    snsqMethods.put("7123863211779337730", new SNsQ(i++));
    snsqMethods.put("4400130971601402884", new SNsQ(i++));
    snsqMethods.put("7123863211783977179", new SNsQ(i++));
    snsqMethods.put("7123863211778720190", new SNsQ(i++));
    snsqMethods.put("7123863211778723194", new SNsQ(i++));
    snsqMethods.put("1931527332608088785", new SNsQ(i++));
    snsqMethods.put("7123863211778713627", new SNsQ(i++));
    snsqMethods.put("7222035348494301288", new SNsQ(i++));
    snsqMethods.put("7123863211778716813", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_1(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_2(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_3(ctx));
        case 6:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_4_0(ctx));
        case 7:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_4_1(ctx));
        case 8:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_4_2(ctx));
        case 9:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_4_3(ctx));
        case 10:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_4_4(ctx));
        case 11:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_6_0(ctx));
        case 12:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_8_0(ctx));
        case 13:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_8_1(ctx));
        case 14:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_8_2(ctx));
        case 15:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_9_0(ctx));
        case 16:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_9_1(ctx));
        case 17:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_9_2(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("7123863211782975669", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
    pvqMethods.put("7870468911822615871", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
    pvqMethods.put("7870468911819912020", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_Machine"));
    pvqMethods.put("7870468911828416820", new PVQ(i++, MetaAdapterFactory.getProperty(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42c1L, 0x6d3985c698bb42c2L, "value"), "1"));
    pvqMethods.put("7870468911828420137", new PVQ(i++, MetaAdapterFactory.getProperty(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42c4L, 0x6d3985c698bd8803L, "value"), "text"));
    pvqMethods.put("6941111777069912541", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "name"));
    pvqMethods.put("2632292819002944596", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "set_name"));
    pvqMethods.put("6941111777071194389", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "struct_name"));
    pvqMethods.put("1931527332607302074", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "oper_name"));
    pvqMethods.put("7222035348494296733", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "operation name"));
    pvqMethods.put("7123863211779703475", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "identifier_name"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_0_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_0_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_2_0(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_2_1(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_5_0(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_6_0(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_6_1(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_8_0(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_9_0(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_10_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("8827571491623464051", new IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    IfMacroCondition query = identity.forTemplateNode(imcMethods);
    return (query != null ? query : super.getIfMacroCondition(identity));
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_5_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$HeKV = MetaAdapterFactory.getProperty(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a015L, 0x7d382cf97c75a016L, "value");
    /*package*/ static final SProperty value$Hfvr = MetaAdapterFactory.getProperty(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a018L, 0x7d382cf97c75a019L, "value");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink ElseBranch$4DVm = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, 0x7d382cf97c7d49e0L, "ElseBranch");
    /*package*/ static final SContainmentLink set$YcdO = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL, 0x7d382cf97c7b862fL, "set");
    /*package*/ static final SContainmentLink set$dDCX = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x62dd0bd8e6cc1b0bL, 0x62dd0bd8e6cc1b0eL, "set");
    /*package*/ static final SContainmentLink value$dE6Z = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x62dd0bd8e6cc1b0bL, 0x62dd0bd8e6cc1b10L, "value");
    /*package*/ static final SContainmentLink expr$PKyr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4eL, 0x7d382cf97c7d3d4fL, "expr");
    /*package*/ static final SContainmentLink initialisation$GunN = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01cL, 0x7d382cf97c816c19L, "initialisation");
    /*package*/ static final SContainmentLink expr$4fxV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756976L, 0x7d382cf97c756977L, "expr");
    /*package*/ static final SContainmentLink expr$rNAV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541ae44fL, 0x2ddbf14b541ae450L, "expr");
    /*package*/ static final SContainmentLink expr$1jbr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541b29e2L, 0x2ddbf14b541b29e3L, "expr");
    /*package*/ static final SContainmentLink left$465r = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L, 0x7d382cf97c756965L, "left");
    /*package*/ static final SContainmentLink right$46zt = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L, 0x7d382cf97c756967L, "right");
    /*package*/ static final SContainmentLink function$uhoH = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L, 0x62dd0bd8e6994573L, "function");
    /*package*/ static final SContainmentLink antecedant$uhQJ = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L, 0x62dd0bd8e6994575L, "antecedant");
    /*package*/ static final SContainmentLink lhs$AG5Q = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, 0x7d382cf97c7d3d0cL, "lhs");
    /*package*/ static final SContainmentLink expr$AGzS = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L, 0x7d382cf97c7d3d0eL, "expr");
    /*package*/ static final SContainmentLink condition$PSJv = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, 0x7d382cf97c7d3d5dL, "condition");
    /*package*/ static final SContainmentLink condition$RlMr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, 0x7d382cf97c801d47L, "condition");
    /*package*/ static final SContainmentLink to$g5So = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L, 0x3d1067ce476396feL, "to");
    /*package*/ static final SContainmentLink amount$g6_r = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L, 0x3d1067ce47639701L, "amount");
    /*package*/ static final SContainmentLink name$3HGV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL, 0x7d382cf97c78126eL, "name");
    /*package*/ static final SContainmentLink keyType$LiYr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c784996L, 0x7d382cf97c784997L, "keyType");
    /*package*/ static final SContainmentLink valueType$Ljst = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c784996L, 0x7d382cf97c784999L, "valueType");
    /*package*/ static final SContainmentLink name$Bgnm = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6eb31L, 0x62dd0bd8e6ab9332L, "name");
    /*package*/ static final SContainmentLink elements$zdCX = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c774b48L, 0x7d382cf97c774b4bL, "elements");
    /*package*/ static final SContainmentLink body$aE2 = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6993c5af9L, 0x1ace29e015ec1316L, "body");
    /*package*/ static final SContainmentLink enumeratedSets$38PV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01cL, 0x7d382cf97c774bb2L, "enumeratedSets");
    /*package*/ static final SContainmentLink values$zTxQ = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01cL, 0x62dd0bd8e6c6e2a3L, "values");
    /*package*/ static final SContainmentLink invariant$k4Kh = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01cL, 0x7d382cf97c7c15baL, "invariant");
    /*package*/ static final SContainmentLink operations$pJKb = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01cL, 0x6d3985c698b0194fL, "operations");
    /*package*/ static final SContainmentLink IfTrueBranch$4$iY = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, 0x7d382cf97c7d49ddL, "IfTrueBranch");
    /*package*/ static final SContainmentLink body$Rmgt = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L, 0x7d382cf97c801d49L, "body");
    /*package*/ static final SContainmentLink expressions$kezt = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4763978eL, 0x3d1067ce47639791L, "expressions");
    /*package*/ static final SContainmentLink elements$ppwr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L, 0x3d1067ce4782bb4aL, "elements");
    /*package*/ static final SContainmentLink preconditions$4p39 = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, 0x6d3985c698ada69dL, "preconditions");
    /*package*/ static final SContainmentLink body$4v9z = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, 0x6d3985c698ada6a2L, "body");
    /*package*/ static final SContainmentLink typingPredicates$4o75 = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, 0x6d3985c698ada699L, "typingPredicates");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept StructSet$we = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L, "B.structure.StructSet");
    /*package*/ static final SConcept Operation$W_ = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, "B.structure.Operation");
    /*package*/ static final SConcept TransferOperation$Fn = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L, "B.structure.TransferOperation");
  }
}
