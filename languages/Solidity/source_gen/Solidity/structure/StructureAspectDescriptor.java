package Solidity.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAddress = createDescriptorForAddress();
  /*package*/ final ConceptDescriptor myConceptAddressCast = createDescriptorForAddressCast();
  /*package*/ final ConceptDescriptor myConceptAndExpression = createDescriptorForAndExpression();
  /*package*/ final ConceptDescriptor myConceptArrayPush = createDescriptorForArrayPush();
  /*package*/ final ConceptDescriptor myConceptArrayType = createDescriptorForArrayType();
  /*package*/ final ConceptDescriptor myConceptAssignementStatement = createDescriptorForAssignementStatement();
  /*package*/ final ConceptDescriptor myConceptBalanceOf = createDescriptorForBalanceOf();
  /*package*/ final ConceptDescriptor myConceptBinaryExpression = createDescriptorForBinaryExpression();
  /*package*/ final ConceptDescriptor myConceptBlockComment = createDescriptorForBlockComment();
  /*package*/ final ConceptDescriptor myConceptBlockTimeStamp = createDescriptorForBlockTimeStamp();
  /*package*/ final ConceptDescriptor myConceptBool = createDescriptorForBool();
  /*package*/ final ConceptDescriptor myConceptBytes = createDescriptorForBytes();
  /*package*/ final ConceptDescriptor myConceptConstructor = createDescriptorForConstructor();
  /*package*/ final ConceptDescriptor myConceptContract = createDescriptorForContract();
  /*package*/ final ConceptDescriptor myConceptContractPart = createDescriptorForContractPart();
  /*package*/ final ConceptDescriptor myConceptDivExpression = createDescriptorForDivExpression();
  /*package*/ final ConceptDescriptor myConceptDotExpression = createDescriptorForDotExpression();
  /*package*/ final ConceptDescriptor myConceptEmptyLine = createDescriptorForEmptyLine();
  /*package*/ final ConceptDescriptor myConceptEmptySstatement = createDescriptorForEmptySstatement();
  /*package*/ final ConceptDescriptor myConceptEnumDefinition = createDescriptorForEnumDefinition();
  /*package*/ final ConceptDescriptor myConceptEnumMember = createDescriptorForEnumMember();
  /*package*/ final ConceptDescriptor myConceptEqualExpression = createDescriptorForEqualExpression();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFalseExpression = createDescriptorForFalseExpression();
  /*package*/ final ConceptDescriptor myConceptFunctionCall = createDescriptorForFunctionCall();
  /*package*/ final ConceptDescriptor myConceptFunctionDefinition = createDescriptorForFunctionDefinition();
  /*package*/ final ConceptDescriptor myConceptGreaterThanExpression = createDescriptorForGreaterThanExpression();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOrEqualExpression = createDescriptorForGreaterThanOrEqualExpression();
  /*package*/ final ConceptDescriptor myConceptIdentifier = createDescriptorForIdentifier();
  /*package*/ final ConceptDescriptor myConceptIfStatement = createDescriptorForIfStatement();
  /*package*/ final ConceptDescriptor myConceptImmuableStateVariableDeclaration = createDescriptorForImmuableStateVariableDeclaration();
  /*package*/ final ConceptDescriptor myConceptIndex = createDescriptorForIndex();
  /*package*/ final ConceptDescriptor myConceptInequalExpression = createDescriptorForInequalExpression();
  /*package*/ final ConceptDescriptor myConceptInteger = createDescriptorForInteger();
  /*package*/ final ConceptDescriptor myConceptIntegerLiteral = createDescriptorForIntegerLiteral();
  /*package*/ final ConceptDescriptor myConceptLessThanExpression = createDescriptorForLessThanExpression();
  /*package*/ final ConceptDescriptor myConceptLessThanOrEqualExpression = createDescriptorForLessThanOrEqualExpression();
  /*package*/ final ConceptDescriptor myConceptLineComment = createDescriptorForLineComment();
  /*package*/ final ConceptDescriptor myConceptLocalVarDeclaration = createDescriptorForLocalVarDeclaration();
  /*package*/ final ConceptDescriptor myConceptMapping = createDescriptorForMapping();
  /*package*/ final ConceptDescriptor myConceptMappingElement = createDescriptorForMappingElement();
  /*package*/ final ConceptDescriptor myConceptMaxUint = createDescriptorForMaxUint();
  /*package*/ final ConceptDescriptor myConceptMinusExpression = createDescriptorForMinusExpression();
  /*package*/ final ConceptDescriptor myConceptMinusminus = createDescriptorForMinusminus();
  /*package*/ final ConceptDescriptor myConceptModuloExpression = createDescriptorForModuloExpression();
  /*package*/ final ConceptDescriptor myConceptMultExpression = createDescriptorForMultExpression();
  /*package*/ final ConceptDescriptor myConceptNegativeExpression = createDescriptorForNegativeExpression();
  /*package*/ final ConceptDescriptor myConceptNotExpression = createDescriptorForNotExpression();
  /*package*/ final ConceptDescriptor myConceptNullAddress = createDescriptorForNullAddress();
  /*package*/ final ConceptDescriptor myConceptOrExpression = createDescriptorForOrExpression();
  /*package*/ final ConceptDescriptor myConceptParameter = createDescriptorForParameter();
  /*package*/ final ConceptDescriptor myConceptParameterList = createDescriptorForParameterList();
  /*package*/ final ConceptDescriptor myConceptParenthesisExpression = createDescriptorForParenthesisExpression();
  /*package*/ final ConceptDescriptor myConceptPayableFunctionDefinition = createDescriptorForPayableFunctionDefinition();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = createDescriptorForPlusExpression();
  /*package*/ final ConceptDescriptor myConceptPlusplus = createDescriptorForPlusplus();
  /*package*/ final ConceptDescriptor myConceptPowerExpression = createDescriptorForPowerExpression();
  /*package*/ final ConceptDescriptor myConceptRequireStatement = createDescriptorForRequireStatement();
  /*package*/ final ConceptDescriptor myConceptReturnStatement = createDescriptorForReturnStatement();
  /*package*/ final ConceptDescriptor myConceptSender = createDescriptorForSender();
  /*package*/ final ConceptDescriptor myConceptSolidityGlobalVariables = createDescriptorForSolidityGlobalVariables();
  /*package*/ final ConceptDescriptor myConceptStateVariableDeclaration = createDescriptorForStateVariableDeclaration();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptStatementBlock = createDescriptorForStatementBlock();
  /*package*/ final ConceptDescriptor myConceptString = createDescriptorForString();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = createDescriptorForStringLiteral();
  /*package*/ final ConceptDescriptor myConceptStructDefinition = createDescriptorForStructDefinition();
  /*package*/ final ConceptDescriptor myConceptStructMemberDeclaration = createDescriptorForStructMemberDeclaration();
  /*package*/ final ConceptDescriptor myConceptTransferStatement = createDescriptorForTransferStatement();
  /*package*/ final ConceptDescriptor myConceptTrueExpression = createDescriptorForTrueExpression();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptUInteger = createDescriptorForUInteger();
  /*package*/ final ConceptDescriptor myConceptUserType = createDescriptorForUserType();
  /*package*/ final ConceptDescriptor myConceptValue = createDescriptorForValue();
  /*package*/ final ConceptDescriptor myConceptWhileStatement = createDescriptorForWhileStatement();
  /*package*/ final ConceptDescriptor myConceptrevert = createDescriptorForrevert();
  /*package*/ final ConceptDescriptor myConceptstructMemberList = createDescriptorForstructMemberList();
  /*package*/ final ConceptDescriptor myConceptthisExpression = createDescriptorForthisExpression();
  /*package*/ final ConceptDescriptor myConceptvarDecExpression = createDescriptorForvarDecExpression();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAddress, myConceptAddressCast, myConceptAndExpression, myConceptArrayPush, myConceptArrayType, myConceptAssignementStatement, myConceptBalanceOf, myConceptBinaryExpression, myConceptBlockComment, myConceptBlockTimeStamp, myConceptBool, myConceptBytes, myConceptConstructor, myConceptContract, myConceptContractPart, myConceptDivExpression, myConceptDotExpression, myConceptEmptyLine, myConceptEmptySstatement, myConceptEnumDefinition, myConceptEnumMember, myConceptEqualExpression, myConceptExpression, myConceptFalseExpression, myConceptFunctionCall, myConceptFunctionDefinition, myConceptGreaterThanExpression, myConceptGreaterThanOrEqualExpression, myConceptIdentifier, myConceptIfStatement, myConceptImmuableStateVariableDeclaration, myConceptIndex, myConceptInequalExpression, myConceptInteger, myConceptIntegerLiteral, myConceptLessThanExpression, myConceptLessThanOrEqualExpression, myConceptLineComment, myConceptLocalVarDeclaration, myConceptMapping, myConceptMappingElement, myConceptMaxUint, myConceptMinusExpression, myConceptMinusminus, myConceptModuloExpression, myConceptMultExpression, myConceptNegativeExpression, myConceptNotExpression, myConceptNullAddress, myConceptOrExpression, myConceptParameter, myConceptParameterList, myConceptParenthesisExpression, myConceptPayableFunctionDefinition, myConceptPlusExpression, myConceptPlusplus, myConceptPowerExpression, myConceptRequireStatement, myConceptReturnStatement, myConceptSender, myConceptSolidityGlobalVariables, myConceptStateVariableDeclaration, myConceptStatement, myConceptStatementBlock, myConceptString, myConceptStringLiteral, myConceptStructDefinition, myConceptStructMemberDeclaration, myConceptTransferStatement, myConceptTrueExpression, myConceptType, myConceptUInteger, myConceptUserType, myConceptValue, myConceptWhileStatement, myConceptrevert, myConceptstructMemberList, myConceptthisExpression, myConceptvarDecExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Address:
        return myConceptAddress;
      case LanguageConceptSwitch.AddressCast:
        return myConceptAddressCast;
      case LanguageConceptSwitch.AndExpression:
        return myConceptAndExpression;
      case LanguageConceptSwitch.ArrayPush:
        return myConceptArrayPush;
      case LanguageConceptSwitch.ArrayType:
        return myConceptArrayType;
      case LanguageConceptSwitch.AssignementStatement:
        return myConceptAssignementStatement;
      case LanguageConceptSwitch.BalanceOf:
        return myConceptBalanceOf;
      case LanguageConceptSwitch.BinaryExpression:
        return myConceptBinaryExpression;
      case LanguageConceptSwitch.BlockComment:
        return myConceptBlockComment;
      case LanguageConceptSwitch.BlockTimeStamp:
        return myConceptBlockTimeStamp;
      case LanguageConceptSwitch.Bool:
        return myConceptBool;
      case LanguageConceptSwitch.Bytes:
        return myConceptBytes;
      case LanguageConceptSwitch.Constructor:
        return myConceptConstructor;
      case LanguageConceptSwitch.Contract:
        return myConceptContract;
      case LanguageConceptSwitch.ContractPart:
        return myConceptContractPart;
      case LanguageConceptSwitch.DivExpression:
        return myConceptDivExpression;
      case LanguageConceptSwitch.DotExpression:
        return myConceptDotExpression;
      case LanguageConceptSwitch.EmptyLine:
        return myConceptEmptyLine;
      case LanguageConceptSwitch.EmptySstatement:
        return myConceptEmptySstatement;
      case LanguageConceptSwitch.EnumDefinition:
        return myConceptEnumDefinition;
      case LanguageConceptSwitch.EnumMember:
        return myConceptEnumMember;
      case LanguageConceptSwitch.EqualExpression:
        return myConceptEqualExpression;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.FalseExpression:
        return myConceptFalseExpression;
      case LanguageConceptSwitch.FunctionCall:
        return myConceptFunctionCall;
      case LanguageConceptSwitch.FunctionDefinition:
        return myConceptFunctionDefinition;
      case LanguageConceptSwitch.GreaterThanExpression:
        return myConceptGreaterThanExpression;
      case LanguageConceptSwitch.GreaterThanOrEqualExpression:
        return myConceptGreaterThanOrEqualExpression;
      case LanguageConceptSwitch.Identifier:
        return myConceptIdentifier;
      case LanguageConceptSwitch.IfStatement:
        return myConceptIfStatement;
      case LanguageConceptSwitch.ImmuableStateVariableDeclaration:
        return myConceptImmuableStateVariableDeclaration;
      case LanguageConceptSwitch.Index:
        return myConceptIndex;
      case LanguageConceptSwitch.InequalExpression:
        return myConceptInequalExpression;
      case LanguageConceptSwitch.Integer:
        return myConceptInteger;
      case LanguageConceptSwitch.IntegerLiteral:
        return myConceptIntegerLiteral;
      case LanguageConceptSwitch.LessThanExpression:
        return myConceptLessThanExpression;
      case LanguageConceptSwitch.LessThanOrEqualExpression:
        return myConceptLessThanOrEqualExpression;
      case LanguageConceptSwitch.LineComment:
        return myConceptLineComment;
      case LanguageConceptSwitch.LocalVarDeclaration:
        return myConceptLocalVarDeclaration;
      case LanguageConceptSwitch.Mapping:
        return myConceptMapping;
      case LanguageConceptSwitch.MappingElement:
        return myConceptMappingElement;
      case LanguageConceptSwitch.MaxUint:
        return myConceptMaxUint;
      case LanguageConceptSwitch.MinusExpression:
        return myConceptMinusExpression;
      case LanguageConceptSwitch.Minusminus:
        return myConceptMinusminus;
      case LanguageConceptSwitch.ModuloExpression:
        return myConceptModuloExpression;
      case LanguageConceptSwitch.MultExpression:
        return myConceptMultExpression;
      case LanguageConceptSwitch.NegativeExpression:
        return myConceptNegativeExpression;
      case LanguageConceptSwitch.NotExpression:
        return myConceptNotExpression;
      case LanguageConceptSwitch.NullAddress:
        return myConceptNullAddress;
      case LanguageConceptSwitch.OrExpression:
        return myConceptOrExpression;
      case LanguageConceptSwitch.Parameter:
        return myConceptParameter;
      case LanguageConceptSwitch.ParameterList:
        return myConceptParameterList;
      case LanguageConceptSwitch.ParenthesisExpression:
        return myConceptParenthesisExpression;
      case LanguageConceptSwitch.PayableFunctionDefinition:
        return myConceptPayableFunctionDefinition;
      case LanguageConceptSwitch.PlusExpression:
        return myConceptPlusExpression;
      case LanguageConceptSwitch.Plusplus:
        return myConceptPlusplus;
      case LanguageConceptSwitch.PowerExpression:
        return myConceptPowerExpression;
      case LanguageConceptSwitch.RequireStatement:
        return myConceptRequireStatement;
      case LanguageConceptSwitch.ReturnStatement:
        return myConceptReturnStatement;
      case LanguageConceptSwitch.Sender:
        return myConceptSender;
      case LanguageConceptSwitch.SolidityGlobalVariables:
        return myConceptSolidityGlobalVariables;
      case LanguageConceptSwitch.StateVariableDeclaration:
        return myConceptStateVariableDeclaration;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.StatementBlock:
        return myConceptStatementBlock;
      case LanguageConceptSwitch.String:
        return myConceptString;
      case LanguageConceptSwitch.StringLiteral:
        return myConceptStringLiteral;
      case LanguageConceptSwitch.StructDefinition:
        return myConceptStructDefinition;
      case LanguageConceptSwitch.StructMemberDeclaration:
        return myConceptStructMemberDeclaration;
      case LanguageConceptSwitch.TransferStatement:
        return myConceptTransferStatement;
      case LanguageConceptSwitch.TrueExpression:
        return myConceptTrueExpression;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.UInteger:
        return myConceptUInteger;
      case LanguageConceptSwitch.UserType:
        return myConceptUserType;
      case LanguageConceptSwitch.Value:
        return myConceptValue;
      case LanguageConceptSwitch.WhileStatement:
        return myConceptWhileStatement;
      case LanguageConceptSwitch.revert:
        return myConceptrevert;
      case LanguageConceptSwitch.structMemberList:
        return myConceptstructMemberList;
      case LanguageConceptSwitch.thisExpression:
        return myConceptthisExpression;
      case LanguageConceptSwitch.varDecExpression:
        return myConceptvarDecExpression;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAddress() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Address", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be2cdfL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819271391");
    b.version(2);
    b.alias("address");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAddressCast() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "AddressCast", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x762a85f9c98187adL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/8514765353371404205");
    b.version(2);
    b.aggregate("expr", 0x762a85f9c98187aeL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("8514765353371404206").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAndExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "AndExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b4L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080372");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayPush() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ArrayPush", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x659c33bf0c48a925L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7321783989835442469");
    b.version(2);
    b.aggregate("array", 0x659c33bf0c48a926L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("7321783989835442470").done();
    b.aggregate("expr", 0x659c33bf0c48a928L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7321783989835442472").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ArrayType", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x4e0a79736b1b10efL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/5623440621350621423");
    b.version(2);
    b.aggregate("type", 0x4e0a79736b1b10f0L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("5623440621350621424").done();
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignementStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "AssignementStatement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc8L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819275720");
    b.version(2);
    b.aggregate("lhs", 0x6d3985c698be3dc9L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911819275721").done();
    b.aggregate("rhs", 0x6d3985c698be3dcbL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911819275723").done();
    b.alias("=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBalanceOf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "BalanceOf", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995311bbL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.SolidityGlobalVariables", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995303e5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911829029307");
    b.version(2);
    b.aggregate("varName", 0x6d3985c6995311bcL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911829029308").done();
    b.alias("balance");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080356");
    b.version(2);
    b.aggregate("left", 0x6d3985c698bb42a5L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911819080357").done();
    b.aggregate("right", 0x6d3985c698bb42aaL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911819080362").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBlockComment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "BlockComment", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x37b0c54a6e947e0cL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/4012924191460589068");
    b.version(2);
    b.property("text", 0x37b0c54a6e947e14L).type(PrimitiveTypeId.STRING).origin("4012924191460589076").done();
    b.alias("/*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBlockTimeStamp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "BlockTimeStamp", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x775e747952f096e6L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.SolidityGlobalVariables", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995303e5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/8601440402755589862");
    b.version(2);
    b.alias("block.timestamp");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBool() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Bool", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be2d36L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819271478");
    b.version(2);
    b.alias("bool");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBytes() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Bytes", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be2ce0L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819271392");
    b.version(2);
    b.alias("bytes");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstructor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Constructor", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3db8L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819275704");
    b.version(2);
    b.property("payable", 0x86a6df74eb20810L).type(PrimitiveTypeId.BOOLEAN).origin("606418008779393040").done();
    b.aggregate("inputParameters", 0x6d3985c698be63d8L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6347L).optional(true).ordered(true).multiple(true).origin("7870468911819285464").done();
    b.aggregate("body", 0x6d3985c698be63faL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L).optional(true).ordered(true).multiple(true).origin("7870468911819285498").done();
    b.alias("constructor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContract() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Contract", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882bL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819229227");
    b.version(2);
    b.aggregate("contractParts", 0x6d3985c698bd8833L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL).optional(true).ordered(true).multiple(true).origin("7870468911819229235").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContractPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819229230");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "DivExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b3L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080371");
    b.version(2);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "DotExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x22386bbff835bedbL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/2465839268232543963");
    b.version(2);
    b.aggregate("operator", 0x22386bbff835bedcL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("2465839268232543964").done();
    b.aggregate("expr", 0x22386bbff835bedeL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("2465839268232543966").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "EmptyLine", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698ca4933L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911820065075");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptySstatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "EmptySstatement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6994c8c3bL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911828601915");
    b.version(2);
    b.alias(" ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnumDefinition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "EnumDefinition", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be637cL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819285372");
    b.version(2);
    b.aggregate("elements", 0x6d3985c698be637dL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(true).origin("7870468911819285373").done();
    b.alias("enum");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnumMember() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "EnumMember", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x775e747952f0b82bL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/8601440402755598379");
    b.version(2);
    b.aggregate("enumName", 0x7d37e50415579beaL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("9022932184160771050").done();
    b.aggregate("enumMember", 0x7d37e50415579becL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("9022932184160771052").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "EqualExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42bbL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080379");
    b.version(2);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.class_(false, true, false);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819079527");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFalseExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "FalseExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42c5L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080389");
    b.version(2);
    b.alias("false");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "FunctionCall", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995cf507L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911829677319");
    b.version(2);
    b.aggregate("functionName", 0x6d3985c6995cf508L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("7870468911829677320").done();
    b.aggregate("inputParameterList", 0x6d3985c6995cf50aL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(true).ordered(true).multiple(true).origin("7870468911829677322").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionDefinition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "FunctionDefinition", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bfce2aL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819378218");
    b.version(2);
    b.aggregate("inputParameters", 0x6d3985c698bfce2bL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6347L).optional(true).ordered(true).multiple(true).origin("7870468911819378219").done();
    b.aggregate("outputParameters", 0x6d3985c698bfce2dL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6346L).optional(true).ordered(true).multiple(false).origin("7870468911819378221").done();
    b.aggregate("body", 0x6d3985c698bfce30L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L).optional(true).ordered(true).multiple(true).origin("7870468911819378224").done();
    b.alias("function");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "GreaterThanExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b9L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080377");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanOrEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "GreaterThanOrEqualExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42baL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080378");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIdentifier() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Identifier", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080382");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "IfStatement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3e04L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819275780");
    b.version(2);
    b.aggregate("condition", 0x6d3985c698be3e05L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911819275781").done();
    b.aggregate("ifTrueBranch", 0x6d3985c698be3e07L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L).optional(true).ordered(true).multiple(true).origin("7870468911819275783").done();
    b.aggregate("elseBeanch", 0x1ace29e015db1494L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L).optional(true).ordered(true).multiple(true).origin("1931527332604613780").done();
    b.alias("if");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForImmuableStateVariableDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ImmuableStateVariableDeclaration", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6991d9ee4L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.StateVariableDeclaration", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8892L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911825526500");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIndex() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Index", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x605b779bcf3767c1L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/6943274761601902529");
    b.version(2);
    b.aggregate("value", 0x605b779bcf3767c2L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("6943274761601902530").done();
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInequalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "InequalExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698d506f0L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911820769008");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Integer", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8896L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819229334");
    b.version(2);
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "IntegerLiteral", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42c1L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080385");
    b.version(2);
    b.property("value", 0x6d3985c698bb42c2L).type(PrimitiveTypeId.STRING).origin("7870468911819080386").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "LessThanExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42bcL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080380");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanOrEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "LessThanOrEqualExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42bdL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080381");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLineComment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "LineComment", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x37b0c54a6e88c0ceL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/4012924191459819726");
    b.version(2);
    b.property("text", 0x37b0c54a6e88c0cfL).type(PrimitiveTypeId.STRING).origin("4012924191459819727").done();
    b.alias("//");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLocalVarDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "LocalVarDeclaration", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x34d309d74a2c2517L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/3806396930325226775");
    b.version(2);
    b.aggregate("type", 0x34d309d74a2c2518L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("3806396930325226776").done();
    b.aggregate("varName", 0x34d309d74a2c2519L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("3806396930325226777").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMapping() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Mapping", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be2ce1L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819271393");
    b.version(2);
    b.aggregate("keyType", 0x6d3985c698be2ce2L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("7870468911819271394").done();
    b.aggregate("valType", 0x6d3985c698be2ce4L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("7870468911819271396").done();
    b.alias("mapping");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMappingElement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "MappingElement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x8724b429f10bb1bL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/608631649157036827");
    b.version(2);
    b.aggregate("mapName", 0x605b779bcf3767bcL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("1655988352133592188").done();
    b.aggregate("indexes", 0x605b779bcf3767beL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x605b779bcf3767c1L).optional(false).ordered(true).multiple(true).origin("6943274761601902526").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMaxUint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "MaxUint", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x28fd0440bd05d542L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/2953521606720607554");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "MinusExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b1L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080369");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusminus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Minusminus", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x2ddbf14b541e7e1eL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/3304500057442516510");
    b.version(2);
    b.aggregate("expr", 0x2ddbf14b541e7e1fL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("3304500057442516511").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModuloExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ModuloExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x5c24adf26ba5a297L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/6639623007350661783");
    b.version(2);
    b.alias("%");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "MultExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b2L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080370");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNegativeExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "NegativeExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x1345c017d072bbe0L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/1388727268627626976");
    b.version(2);
    b.aggregate("expression", 0x1345c017d072bbe1L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("1388727268627626977").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "NotExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b6L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080374");
    b.version(2);
    b.aggregate("expr", 0x6d3985c698bb42b7L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911819080375").done();
    b.alias("!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNullAddress() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "NullAddress", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x775e747952e9fd23L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.SolidityGlobalVariables", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995303e5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/8601440402755157283");
    b.version(2);
    b.alias("address(0x0)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "OrExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b5L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080373");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Parameter", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6347L);
    b.class_(false, false, false);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819285319");
    b.version(2);
    b.aggregate("identifer", 0x6d3985c698be6348L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("7870468911819285320").done();
    b.aggregate("type", 0x6d3985c698be634aL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("7870468911819285322").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ParameterList", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6346L);
    b.class_(false, false, false);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819285318");
    b.version(2);
    b.aggregate("parameters", 0x6d3985c698be636eL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6347L).optional(true).ordered(true).multiple(true).origin("7870468911819285358").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParenthesisExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ParenthesisExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x4bf90534ab28b221L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/5474412545813557793");
    b.version(2);
    b.aggregate("expr", 0x4bf90534ab28b222L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("5474412545813557794").done();
    b.alias("(");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPayableFunctionDefinition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "PayableFunctionDefinition", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6415fe5db89abbdaL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7211950056786279386");
    b.version(2);
    b.aggregate("inputParameters", 0x6415fe5db89abbdbL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6347L).optional(true).ordered(true).multiple(true).origin("7211950056786279387").done();
    b.aggregate("outputParameters", 0x6415fe5db89abbdcL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6346L).optional(true).ordered(true).multiple(false).origin("7211950056786279388").done();
    b.aggregate("body", 0x6415fe5db89abbddL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L).optional(true).ordered(true).multiple(true).origin("7211950056786279389").done();
    b.alias("function");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "PlusExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42b0L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080368");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusplus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Plusplus", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x2ddbf14b541e7dfeL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/3304500057442516478");
    b.version(2);
    b.aggregate("expr", 0x2ddbf14b541e7dffL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("3304500057442516479").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPowerExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "PowerExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x5c24adf26ba5a250L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.BinaryExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42a4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/6639623007350661712");
    b.version(2);
    b.alias("**");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRequireStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "RequireStatement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6992389ebL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911825914347");
    b.version(2);
    b.aggregate("expr", 0x6d3985c6992389ecL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911825914348").done();
    b.alias("require");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReturnStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "ReturnStatement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be402fL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819276335");
    b.version(2);
    b.aggregate("returns", 0x6d3985c698be4030L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(true).origin("7870468911819276336").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSender() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Sender", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995311b9L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.SolidityGlobalVariables", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995303e5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911829029305");
    b.version(2);
    b.alias("msg.sender");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSolidityGlobalVariables() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "SolidityGlobalVariables", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995303e5L);
    b.class_(false, true, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911829025765");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStateVariableDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "StateVariableDeclaration", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8892L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819229330");
    b.version(2);
    b.property("constant", 0x62dd0bd8e6af8204L).type(PrimitiveTypeId.BOOLEAN).origin("7123863211781095940").done();
    b.property("public", 0x62dd0bd8e6af8206L).type(PrimitiveTypeId.BOOLEAN).origin("7123863211781095942").done();
    b.aggregate("type", 0x6d3985c698be2d37L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("7870468911819271479").done();
    b.aggregate("varname", 0x6d3985c698fbf492L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("7870468911823320210").done();
    b.aggregate("value", 0x62dd0bd8e6af8269L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(true).ordered(true).multiple(false).origin("7123863211781096041").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.class_(false, true, false);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819275717");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatementBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "StatementBlock", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x1ace29e015db0f9cL);
    b.class_(false, false, false);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/1931527332604612508");
    b.version(2);
    b.aggregate("statements", 0x1ace29e015db1287L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L).optional(true).ordered(true).multiple(true).origin("1931527332604613255").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForString() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "String", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be2b55L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819270997");
    b.version(2);
    b.alias("string");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "StringLiteral", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42c4L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080388");
    b.version(2);
    b.property("value", 0x6d3985c698bd8803L).type(PrimitiveTypeId.STRING).origin("7870468911819229187").done();
    b.alias("\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStructDefinition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "StructDefinition", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x3d1067ce47861efaL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.ContractPart", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd882eL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/4400130971601870586");
    b.version(2);
    b.aggregate("memberList", 0x3d1067ce47861effL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6347L).optional(false).ordered(true).multiple(true).origin("4400130971601870591").done();
    b.alias("struct");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStructMemberDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "StructMemberDeclaration", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x62dd0bd8e6d0e493L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7123863211783283859");
    b.version(2);
    b.aggregate("type", 0x62dd0bd8e6d56f26L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("7123863211783581478").done();
    b.alias(":");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTransferStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "TransferStatement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x3d1067ce4769e0a3L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/4400130971600019619");
    b.version(2);
    b.aggregate("to", 0x3d1067ce4769e0a4L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("4400130971600019620").done();
    b.aggregate("amount", 0x3d1067ce4769e0a6L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("4400130971600019622").done();
    b.alias("transfer");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrueExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "TrueExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42c6L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819080390");
    b.version(2);
    b.alias("true");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.class_(false, true, false);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819229331");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "UInteger", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be2b54L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819270996");
    b.version(2);
    b.alias("uint");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUserType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "UserType", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6053c862ba7e9d96L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Type", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/6941111777069276566");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "Value", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995311baL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.SolidityGlobalVariables", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995303e5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911829029306");
    b.version(2);
    b.alias("msg.value");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhileStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "WhileStatement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3fa9L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/7870468911819276201");
    b.version(2);
    b.aggregate("condition", 0x6d3985c698be3faaL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(false).ordered(true).multiple(false).origin("7870468911819276202").done();
    b.aggregate("body", 0x6d3985c698be3facL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L).optional(true).ordered(true).multiple(true).origin("7870468911819276204").done();
    b.alias("while");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForrevert() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "revert", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x1ddd0b4a057a284eL);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Statement", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be3dc5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/2151888609500342350");
    b.version(2);
    b.alias("revert");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForstructMemberList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "structMemberList", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6053c862ba6cff37L);
    b.class_(false, false, false);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/6941111777068121911");
    b.version(2);
    b.aggregate("members", 0x6053c862ba6cff38L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698be6347L).optional(false).ordered(true).multiple(true).origin("6941111777068121912").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForthisExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "thisExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x147a49e95acddee8L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.SolidityGlobalVariables", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c6995303e5L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/1475573094516907752");
    b.version(2);
    b.alias("this");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForvarDecExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Solidity", "varDecExpression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x4fa9440f95cb2a00L);
    b.class_(false, false, false);
    b.super_("Solidity.structure.Expression", 0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L);
    b.origin("r:f1c15c3b-6dc7-4b98-a380-5d14c147b0c7(Solidity.structure)/5740194033788725760");
    b.version(2);
    b.aggregate("type", 0x4fa9440f95cb2a01L).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bd8893L).optional(false).ordered(true).multiple(false).origin("5740194033788725761").done();
    b.aggregate("varName", 0x605b779bcf3767bcL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb42beL).optional(false).ordered(true).multiple(false).origin("6943274761601902524").done();
    b.aggregate("value", 0x4fa9440f95cb2a0aL).target(0xf72d32028a4541adL, 0xbb612369f7191040L, 0x6d3985c698bb3f67L).optional(true).ordered(true).multiple(false).origin("5740194033788725770").done();
    b.alias("varDex");
    return b.create();
  }
}
