package B.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_BBinaryExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BBinaryExpression_InferenceRule() {
  }
  public void applyRule(final SNode bBinaryExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode leftType = typeCheckingContext.typeOf(SLinkOperations.getTarget(bBinaryExpression, LINKS.left$465r), "r:80ad4a96-a74b-49c8-b543-c9fa09d90e45(B.typesystem)", "7870468911829462635", true);
      typeCheckingContext.whenConcrete(leftType, new Runnable() {
        public void run() {
          {
            final SNode rightType = typeCheckingContext.typeOf(SLinkOperations.getTarget(bBinaryExpression, LINKS.right$46zt), "r:80ad4a96-a74b-49c8-b543-c9fa09d90e45(B.typesystem)", "7870468911829464189", true);
            typeCheckingContext.whenConcrete(rightType, new Runnable() {
              public void run() {
                SNode resultType = typeCheckingContext.getOverloadedOperationType(bBinaryExpression, typeCheckingContext.getExpandedNode(leftType), typeCheckingContext.getExpandedNode(rightType), new IRuleConflictWarningProducer() {
                  public void produceWarning(String modelId, String ruleId) {
                    typeCheckingContext.reportWarning(bBinaryExpression, "coflicting rules for overloaded operation type", modelId, ruleId, null, new NodeMessageTarget());

                  }
                });
                {
                  SNode _nodeToCheck_1029348928467 = bBinaryExpression;
                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:80ad4a96-a74b-49c8-b543-c9fa09d90e45(B.typesystem)", "7870468911829467158", 0, null);
                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:80ad4a96-a74b-49c8-b543-c9fa09d90e45(B.typesystem)", "7870468911829466372", true), (SNode) resultType, _info_12389875345);
                }

              }
            }, "r:80ad4a96-a74b-49c8-b543-c9fa09d90e45(B.typesystem)", "7870468911829464139", false, false);
          }
        }
      }, "r:80ad4a96-a74b-49c8-b543-c9fa09d90e45(B.typesystem)", "7870468911829462585", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BBinaryExpression$To;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$465r = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L, 0x7d382cf97c756965L, "left");
    /*package*/ static final SContainmentLink right$46zt = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L, 0x7d382cf97c756967L, "right");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BBinaryExpression$To = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L, "B.structure.BBinaryExpression");
  }
}
