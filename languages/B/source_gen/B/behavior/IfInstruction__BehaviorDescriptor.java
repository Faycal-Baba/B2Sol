package B.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class IfInstruction__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, "B.structure.IfInstruction");

  public static final SMethod<Void> setCondition_id5vMBZAy79If = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setCondition").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy79If").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> addSubstituion_id5vMBZAy79Ir = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addSubstituion").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy79Ir").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> addElseBranchSubstituion_id5vMBZAy7bbp = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addElseBranchSubstituion").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy7bbp").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> addElseIfBranch_id5vMBZAy7c6g = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addElseIfBranch").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy7c6g").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(setCondition_id5vMBZAy79If, addSubstituion_id5vMBZAy79Ir, addElseBranchSubstituion_id5vMBZAy7bbp, addElseIfBranch_id5vMBZAy7c6g);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void setCondition_id5vMBZAy79If(@NotNull SNode __thisNode__, SNode condition) {
    SLinkOperations.setTarget(__thisNode__, LINKS.condition$PSJv, condition);
  }
  /*package*/ static void addSubstituion_id5vMBZAy79Ir(@NotNull SNode __thisNode__, SNode substitution) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.IfTrueBranch$4$iY)).addElement(substitution);
  }
  /*package*/ static void addElseBranchSubstituion_id5vMBZAy7bbp(@NotNull SNode __thisNode__, SNode substitution) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.ElseBranch$4DVm)).addElement(substitution);
  }
  /*package*/ static void addElseIfBranch_id5vMBZAy7c6g(@NotNull SNode __thisNode__, SNode elseIf) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elseIfs$8mi0)).addElement(elseIf);
  }

  /*package*/ IfInstruction__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        setCondition_id5vMBZAy79If(node, (SNode) parameters[0]);
        return null;
      case 1:
        addSubstituion_id5vMBZAy79Ir(node, (SNode) parameters[0]);
        return null;
      case 2:
        addElseBranchSubstituion_id5vMBZAy7bbp(node, (SNode) parameters[0]);
        return null;
      case 3:
        addElseIfBranch_id5vMBZAy7c6g(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink condition$PSJv = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, 0x7d382cf97c7d3d5dL, "condition");
    /*package*/ static final SContainmentLink IfTrueBranch$4$iY = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, 0x7d382cf97c7d49ddL, "IfTrueBranch");
    /*package*/ static final SContainmentLink ElseBranch$4DVm = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, 0x7d382cf97c7d49e0L, "ElseBranch");
    /*package*/ static final SContainmentLink elseIfs$8mi0 = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL, 0x1ace29e015cd441bL, "elseIfs");
  }
}
