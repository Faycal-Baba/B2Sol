package B.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class StructSet__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L, "B.structure.StructSet");

  public static final SMethod<Boolean> equals_id7E1Po1byfmE = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("equals").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7E1Po1byfmE").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Integer> hashcode_id7E1Po1byfFf = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("hashcode").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7E1Po1byfFf").build();
  public static final SMethod<Void> addElement_id5vMBZAy63e$ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addElement").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5vMBZAy63e$").build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(equals_id7E1Po1byfmE, hashcode_id7E1Po1byfFf, addElement_id5vMBZAy63e$);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean equals_id7E1Po1byfmE(@NotNull SNode __thisNode__, SNode structSet) {
    if (structSet != null & (((int) StructSet__BehaviorDescriptor.hashcode_id7E1Po1byfFf.invoke(__thisNode__)) == (int) StructSet__BehaviorDescriptor.hashcode_id7E1Po1byfFf.invoke(structSet))) {
      return true;
    }
    return false;
  }
  /*package*/ static int hashcode_id7E1Po1byfFf(@NotNull SNode __thisNode__) {
    Integer value = 1;
    for (SNode t : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elements$ppwr))) {
      value = SPropertyOperations.getString(SLinkOperations.getTarget(t, LINKS.name$3HGV), PROPS.name$MnvL).hashCode() * (int) Set__BehaviorDescriptor.hashcode_id7E1Po1bAC$3.invoke(SLinkOperations.getTarget(t, LINKS.set$YcdO)) * value;
    }
    return value;
  }
  /*package*/ static void addElement_id5vMBZAy63e$(@NotNull SNode __thisNode__, String name, SNode set) {
    SNode tp = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2df43d4e0665706cL, "B.structure.TypingPredicateStructMember"));
    TypingPredicate__BehaviorDescriptor.setName_id5vMBZAy5RAC.invoke(tp, name);
    TypingPredicate__BehaviorDescriptor.setSet_id5vMBZAy5UgC.invoke(tp, set);
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.elements$ppwr)).addElement(tp);
  }

  /*package*/ StructSet__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) equals_id7E1Po1byfmE(node, (SNode) parameters[0]));
      case 1:
        return (T) ((Integer) hashcode_id7E1Po1byfFf(node));
      case 2:
        addElement_id5vMBZAy63e$(node, (String) parameters[0], (SNode) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink set$YcdO = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL, 0x7d382cf97c7b862fL, "set");
    /*package*/ static final SContainmentLink name$3HGV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL, 0x7d382cf97c78126eL, "name");
    /*package*/ static final SContainmentLink elements$ppwr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L, 0x3d1067ce4782bb4aL, "elements");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
