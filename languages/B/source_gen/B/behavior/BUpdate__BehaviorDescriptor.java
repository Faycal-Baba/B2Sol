package B.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class BUpdate__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x605b779bcef5c30dL, "B.structure.BUpdate");

  public static final SMethod<Void> setName_id61rtTJf0BMc = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("61rtTJf0BMc").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> setkey_id61rtTJf0ECp = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setkey").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("61rtTJf0ECp").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> setValue_id61rtTJf0FDL = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setValue").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("61rtTJf0FDL").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(setName_id61rtTJf0BMc, setkey_id61rtTJf0ECp, setValue_id61rtTJf0FDL);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void setName_id61rtTJf0BMc(@NotNull SNode __thisNode__, String name) {
    SNode id = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
    BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(id, name);
    SLinkOperations.setTarget(__thisNode__, LINKS.mappingName$5qvr, id);
  }
  /*package*/ static void setkey_id61rtTJf0ECp(@NotNull SNode __thisNode__, SNode expr) {
    SLinkOperations.setTarget(__thisNode__, LINKS.key$5qXt, expr);
  }
  /*package*/ static void setValue_id61rtTJf0FDL(@NotNull SNode __thisNode__, SNode expr) {
    SLinkOperations.setTarget(__thisNode__, LINKS.value$5w_P, expr);
  }

  /*package*/ BUpdate__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        setName_id61rtTJf0BMc(node, (String) parameters[0]);
        return null;
      case 1:
        setkey_id61rtTJf0ECp(node, (SNode) parameters[0]);
        return null;
      case 2:
        setValue_id61rtTJf0FDL(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink mappingName$5qvr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x605b779bcef5c30dL, 0x605b779bcef5c30eL, "mappingName");
    /*package*/ static final SContainmentLink key$5qXt = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x605b779bcef5c30dL, 0x605b779bcef5c310L, "key");
    /*package*/ static final SContainmentLink value$5w_P = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x605b779bcef5c30dL, 0x605b779bcef5c313L, "value");
  }
}
