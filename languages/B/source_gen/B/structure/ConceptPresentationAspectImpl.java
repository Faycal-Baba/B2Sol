package B.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ArithmeticBinaryExpression;
  private ConceptPresentation props_BAddress;
  private ConceptPresentation props_BAndExpression;
  private ConceptPresentation props_BArrayAccessExpression;
  private ConceptPresentation props_BArrayDimension;
  private ConceptPresentation props_BArrayPush;
  private ConceptPresentation props_BArrayType;
  private ConceptPresentation props_BBalanceOf;
  private ConceptPresentation props_BBinaryExpression;
  private ConceptPresentation props_BBinaryLogicalExpression;
  private ConceptPresentation props_BBool;
  private ConceptPresentation props_BBoolExpression;
  private ConceptPresentation props_BBytes;
  private ConceptPresentation props_BCardExpression;
  private ConceptPresentation props_BDivExpression;
  private ConceptPresentation props_BEqualExpression;
  private ConceptPresentation props_BExpression;
  private ConceptPresentation props_BFalseExpression;
  private ConceptPresentation props_BFunctionCall;
  private ConceptPresentation props_BFunctionIndex;
  private ConceptPresentation props_BGreaterThanExpression;
  private ConceptPresentation props_BGreaterThanOrEqualExpression;
  private ConceptPresentation props_BIdentifier;
  private ConceptPresentation props_BInequalExpression;
  private ConceptPresentation props_BInteger;
  private ConceptPresentation props_BIntegerLiteral;
  private ConceptPresentation props_BLessThanExpression;
  private ConceptPresentation props_BLessThanOrEqualExpression;
  private ConceptPresentation props_BLhsExpression;
  private ConceptPresentation props_BLogicalExpression;
  private ConceptPresentation props_BMappingAccessExpression;
  private ConceptPresentation props_BMinusExpression;
  private ConceptPresentation props_BModuloExpression;
  private ConceptPresentation props_BMultExpression;
  private ConceptPresentation props_BNatural;
  private ConceptPresentation props_BNegativeExpression;
  private ConceptPresentation props_BNotExpression;
  private ConceptPresentation props_BOperationCall;
  private ConceptPresentation props_BOrExpression;
  private ConceptPresentation props_BParenthesisExpression;
  private ConceptPresentation props_BPlusExpression;
  private ConceptPresentation props_BPowerExpression;
  private ConceptPresentation props_BRecordExpression;
  private ConceptPresentation props_BSender;
  private ConceptPresentation props_BSpaceChar;
  private ConceptPresentation props_BString;
  private ConceptPresentation props_BStringLiteral;
  private ConceptPresentation props_BStructMemberAccess;
  private ConceptPresentation props_BTrueExpression;
  private ConceptPresentation props_BValue;
  private ConceptPresentation props_BVarDec;
  private ConceptPresentation props_BVarDeclaration;
  private ConceptPresentation props_BecomesSubstitution;
  private ConceptPresentation props_ConstantValuation;
  private ConceptPresentation props_ElseIf;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_EmptySubsitution;
  private ConceptPresentation props_EnumeratedSet;
  private ConceptPresentation props_Function;
  private ConceptPresentation props_IfInstruction;
  private ConceptPresentation props_ImporterLogic;
  private ConceptPresentation props_Initialisation;
  private ConceptPresentation props_Instruction;
  private ConceptPresentation props_InstructionList;
  private ConceptPresentation props_MAXINT;
  private ConceptPresentation props_MININT;
  private ConceptPresentation props_Machine;
  private ConceptPresentation props_MappignGet;
  private ConceptPresentation props_NullAddress;
  private ConceptPresentation props_Operation;
  private ConceptPresentation props_Predicate;
  private ConceptPresentation props_ReturnSubstitution;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_SolidityGlobalVariables;
  private ConceptPresentation props_StructSet;
  private ConceptPresentation props_THIS;
  private ConceptPresentation props_TransferOperation;
  private ConceptPresentation props_TypingPredicate;
  private ConceptPresentation props_TypingPredicateInvariant;
  private ConceptPresentation props_TypingPredicateParameter;
  private ConceptPresentation props_TypingPredicateProperties;
  private ConceptPresentation props_TypingPredicateStructMember;
  private ConceptPresentation props_VarIn;
  private ConceptPresentation props_WhileInstruction;
  private ConceptPresentation props_block_timestamp;
  private ConceptPresentation props_enumMember;
  private ConceptPresentation props_pred;
  private ConceptPresentation props_revert;
  private ConceptPresentation props_succ;
  private ConceptPresentation props_userDefinedSet;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ArithmeticBinaryExpression:
        if (props_ArithmeticBinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ArithmeticBinaryExpression = cpb.create();
        }
        return props_ArithmeticBinaryExpression;
      case LanguageConceptSwitch.BAddress:
        if (props_BAddress == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ADDRESS");
          props_BAddress = cpb.create();
        }
        return props_BAddress;
      case LanguageConceptSwitch.BAndExpression:
        if (props_BAndExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&");
          props_BAndExpression = cpb.create();
        }
        return props_BAndExpression;
      case LanguageConceptSwitch.BArrayAccessExpression:
        if (props_BArrayAccessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("[");
          props_BArrayAccessExpression = cpb.create();
        }
        return props_BArrayAccessExpression;
      case LanguageConceptSwitch.BArrayDimension:
        if (props_BArrayDimension == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BArrayDimension");
          props_BArrayDimension = cpb.create();
        }
        return props_BArrayDimension;
      case LanguageConceptSwitch.BArrayPush:
        if (props_BArrayPush == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BArrayPush");
          props_BArrayPush = cpb.create();
        }
        return props_BArrayPush;
      case LanguageConceptSwitch.BArrayType:
        if (props_BArrayType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("array");
          props_BArrayType = cpb.create();
        }
        return props_BArrayType;
      case LanguageConceptSwitch.BBalanceOf:
        if (props_BBalanceOf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("balanceOf");
          props_BBalanceOf = cpb.create();
        }
        return props_BBalanceOf;
      case LanguageConceptSwitch.BBinaryExpression:
        if (props_BBinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BBinaryExpression = cpb.create();
        }
        return props_BBinaryExpression;
      case LanguageConceptSwitch.BBinaryLogicalExpression:
        if (props_BBinaryLogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BBinaryLogicalExpression");
          props_BBinaryLogicalExpression = cpb.create();
        }
        return props_BBinaryLogicalExpression;
      case LanguageConceptSwitch.BBool:
        if (props_BBool == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BOOL");
          props_BBool = cpb.create();
        }
        return props_BBool;
      case LanguageConceptSwitch.BBoolExpression:
        if (props_BBoolExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("bool");
          props_BBoolExpression = cpb.create();
        }
        return props_BBoolExpression;
      case LanguageConceptSwitch.BBytes:
        if (props_BBytes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BYTES");
          props_BBytes = cpb.create();
        }
        return props_BBytes;
      case LanguageConceptSwitch.BCardExpression:
        if (props_BCardExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BCardExpression");
          props_BCardExpression = cpb.create();
        }
        return props_BCardExpression;
      case LanguageConceptSwitch.BDivExpression:
        if (props_BDivExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("/");
          props_BDivExpression = cpb.create();
        }
        return props_BDivExpression;
      case LanguageConceptSwitch.BEqualExpression:
        if (props_BEqualExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("=");
          props_BEqualExpression = cpb.create();
        }
        return props_BEqualExpression;
      case LanguageConceptSwitch.BExpression:
        if (props_BExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BExpression = cpb.create();
        }
        return props_BExpression;
      case LanguageConceptSwitch.BFalseExpression:
        if (props_BFalseExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FALSE");
          props_BFalseExpression = cpb.create();
        }
        return props_BFalseExpression;
      case LanguageConceptSwitch.BFunctionCall:
        if (props_BFunctionCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BFunctionCall");
          props_BFunctionCall = cpb.create();
        }
        return props_BFunctionCall;
      case LanguageConceptSwitch.BFunctionIndex:
        if (props_BFunctionIndex == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(");
          props_BFunctionIndex = cpb.create();
        }
        return props_BFunctionIndex;
      case LanguageConceptSwitch.BGreaterThanExpression:
        if (props_BGreaterThanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">");
          props_BGreaterThanExpression = cpb.create();
        }
        return props_BGreaterThanExpression;
      case LanguageConceptSwitch.BGreaterThanOrEqualExpression:
        if (props_BGreaterThanOrEqualExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">=");
          props_BGreaterThanOrEqualExpression = cpb.create();
        }
        return props_BGreaterThanOrEqualExpression;
      case LanguageConceptSwitch.BIdentifier:
        if (props_BIdentifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BIdentifier = cpb.create();
        }
        return props_BIdentifier;
      case LanguageConceptSwitch.BInequalExpression:
        if (props_BInequalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("/=");
          props_BInequalExpression = cpb.create();
        }
        return props_BInequalExpression;
      case LanguageConceptSwitch.BInteger:
        if (props_BInteger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("INT");
          props_BInteger = cpb.create();
        }
        return props_BInteger;
      case LanguageConceptSwitch.BIntegerLiteral:
        if (props_BIntegerLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BIntegerLiteral");
          props_BIntegerLiteral = cpb.create();
        }
        return props_BIntegerLiteral;
      case LanguageConceptSwitch.BLessThanExpression:
        if (props_BLessThanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<");
          props_BLessThanExpression = cpb.create();
        }
        return props_BLessThanExpression;
      case LanguageConceptSwitch.BLessThanOrEqualExpression:
        if (props_BLessThanOrEqualExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<=");
          props_BLessThanOrEqualExpression = cpb.create();
        }
        return props_BLessThanOrEqualExpression;
      case LanguageConceptSwitch.BLhsExpression:
        if (props_BLhsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BLhsExpression = cpb.create();
        }
        return props_BLhsExpression;
      case LanguageConceptSwitch.BLogicalExpression:
        if (props_BLogicalExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BLogicalExpression = cpb.create();
        }
        return props_BLogicalExpression;
      case LanguageConceptSwitch.BMappingAccessExpression:
        if (props_BMappingAccessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("fun");
          props_BMappingAccessExpression = cpb.create();
        }
        return props_BMappingAccessExpression;
      case LanguageConceptSwitch.BMinusExpression:
        if (props_BMinusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("-");
          props_BMinusExpression = cpb.create();
        }
        return props_BMinusExpression;
      case LanguageConceptSwitch.BModuloExpression:
        if (props_BModuloExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mod");
          props_BModuloExpression = cpb.create();
        }
        return props_BModuloExpression;
      case LanguageConceptSwitch.BMultExpression:
        if (props_BMultExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*");
          props_BMultExpression = cpb.create();
        }
        return props_BMultExpression;
      case LanguageConceptSwitch.BNatural:
        if (props_BNatural == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NATURAL");
          props_BNatural = cpb.create();
        }
        return props_BNatural;
      case LanguageConceptSwitch.BNegativeExpression:
        if (props_BNegativeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BNegativeExpression");
          props_BNegativeExpression = cpb.create();
        }
        return props_BNegativeExpression;
      case LanguageConceptSwitch.BNotExpression:
        if (props_BNotExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("not");
          props_BNotExpression = cpb.create();
        }
        return props_BNotExpression;
      case LanguageConceptSwitch.BOperationCall:
        if (props_BOperationCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BOperationCall");
          props_BOperationCall = cpb.create();
        }
        return props_BOperationCall;
      case LanguageConceptSwitch.BOrExpression:
        if (props_BOrExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("or");
          props_BOrExpression = cpb.create();
        }
        return props_BOrExpression;
      case LanguageConceptSwitch.BParenthesisExpression:
        if (props_BParenthesisExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(");
          props_BParenthesisExpression = cpb.create();
        }
        return props_BParenthesisExpression;
      case LanguageConceptSwitch.BPlusExpression:
        if (props_BPlusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_BPlusExpression = cpb.create();
        }
        return props_BPlusExpression;
      case LanguageConceptSwitch.BPowerExpression:
        if (props_BPowerExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("**");
          props_BPowerExpression = cpb.create();
        }
        return props_BPowerExpression;
      case LanguageConceptSwitch.BRecordExpression:
        if (props_BRecordExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("rec");
          props_BRecordExpression = cpb.create();
        }
        return props_BRecordExpression;
      case LanguageConceptSwitch.BSender:
        if (props_BSender == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("msg_sender");
          props_BSender = cpb.create();
        }
        return props_BSender;
      case LanguageConceptSwitch.BSpaceChar:
        if (props_BSpaceChar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BSpaceChar");
          props_BSpaceChar = cpb.create();
        }
        return props_BSpaceChar;
      case LanguageConceptSwitch.BString:
        if (props_BString == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("STRING");
          props_BString = cpb.create();
        }
        return props_BString;
      case LanguageConceptSwitch.BStringLiteral:
        if (props_BStringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"");
          props_BStringLiteral = cpb.create();
        }
        return props_BStringLiteral;
      case LanguageConceptSwitch.BStructMemberAccess:
        if (props_BStructMemberAccess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BStructMemberAccess");
          props_BStructMemberAccess = cpb.create();
        }
        return props_BStructMemberAccess;
      case LanguageConceptSwitch.BTrueExpression:
        if (props_BTrueExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TRUE");
          props_BTrueExpression = cpb.create();
        }
        return props_BTrueExpression;
      case LanguageConceptSwitch.BValue:
        if (props_BValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("msg_value");
          props_BValue = cpb.create();
        }
        return props_BValue;
      case LanguageConceptSwitch.BVarDec:
        if (props_BVarDec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BVarDec");
          props_BVarDec = cpb.create();
        }
        return props_BVarDec;
      case LanguageConceptSwitch.BVarDeclaration:
        if (props_BVarDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BVarDeclaration");
          props_BVarDeclaration = cpb.create();
        }
        return props_BVarDeclaration;
      case LanguageConceptSwitch.BecomesSubstitution:
        if (props_BecomesSubstitution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(":=");
          props_BecomesSubstitution = cpb.create();
        }
        return props_BecomesSubstitution;
      case LanguageConceptSwitch.ConstantValuation:
        if (props_ConstantValuation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConstantValuation = cpb.create();
        }
        return props_ConstantValuation;
      case LanguageConceptSwitch.ElseIf:
        if (props_ElseIf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ElseIf");
          props_ElseIf = cpb.create();
        }
        return props_ElseIf;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(" ");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.EmptySubsitution:
        if (props_EmptySubsitution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(" ");
          props_EmptySubsitution = cpb.create();
        }
        return props_EmptySubsitution;
      case LanguageConceptSwitch.EnumeratedSet:
        if (props_EnumeratedSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnumeratedSet = cpb.create();
        }
        return props_EnumeratedSet;
      case LanguageConceptSwitch.Function:
        if (props_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Function");
          props_Function = cpb.create();
        }
        return props_Function;
      case LanguageConceptSwitch.IfInstruction:
        if (props_IfInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IF");
          props_IfInstruction = cpb.create();
        }
        return props_IfInstruction;
      case LanguageConceptSwitch.ImporterLogic:
        if (props_ImporterLogic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ImporterLogic");
          props_ImporterLogic = cpb.create();
        }
        return props_ImporterLogic;
      case LanguageConceptSwitch.Initialisation:
        if (props_Initialisation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Initialisation");
          props_Initialisation = cpb.create();
        }
        return props_Initialisation;
      case LanguageConceptSwitch.Instruction:
        if (props_Instruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Instruction = cpb.create();
        }
        return props_Instruction;
      case LanguageConceptSwitch.InstructionList:
        if (props_InstructionList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("InstructionList");
          props_InstructionList = cpb.create();
        }
        return props_InstructionList;
      case LanguageConceptSwitch.MAXINT:
        if (props_MAXINT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MAXINT");
          props_MAXINT = cpb.create();
        }
        return props_MAXINT;
      case LanguageConceptSwitch.MININT:
        if (props_MININT == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MININT");
          props_MININT = cpb.create();
        }
        return props_MININT;
      case LanguageConceptSwitch.Machine:
        if (props_Machine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Machine = cpb.create();
        }
        return props_Machine;
      case LanguageConceptSwitch.MappignGet:
        if (props_MappignGet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MappignGet");
          props_MappignGet = cpb.create();
        }
        return props_MappignGet;
      case LanguageConceptSwitch.NullAddress:
        if (props_NullAddress == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("addr_0");
          props_NullAddress = cpb.create();
        }
        return props_NullAddress;
      case LanguageConceptSwitch.Operation:
        if (props_Operation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Operation = cpb.create();
        }
        return props_Operation;
      case LanguageConceptSwitch.Predicate:
        if (props_Predicate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Predicate");
          props_Predicate = cpb.create();
        }
        return props_Predicate;
      case LanguageConceptSwitch.ReturnSubstitution:
        if (props_ReturnSubstitution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ret");
          props_ReturnSubstitution = cpb.create();
        }
        return props_ReturnSubstitution;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.SolidityGlobalVariables:
        if (props_SolidityGlobalVariables == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SolidityGlobalVariables = cpb.create();
        }
        return props_SolidityGlobalVariables;
      case LanguageConceptSwitch.StructSet:
        if (props_StructSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("struct");
          props_StructSet = cpb.create();
        }
        return props_StructSet;
      case LanguageConceptSwitch.THIS:
        if (props_THIS == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("THIS");
          props_THIS = cpb.create();
        }
        return props_THIS;
      case LanguageConceptSwitch.TransferOperation:
        if (props_TransferOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("transfer");
          props_TransferOperation = cpb.create();
        }
        return props_TransferOperation;
      case LanguageConceptSwitch.TypingPredicate:
        if (props_TypingPredicate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TypingPredicate = cpb.create();
        }
        return props_TypingPredicate;
      case LanguageConceptSwitch.TypingPredicateInvariant:
        if (props_TypingPredicateInvariant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(":");
          props_TypingPredicateInvariant = cpb.create();
        }
        return props_TypingPredicateInvariant;
      case LanguageConceptSwitch.TypingPredicateParameter:
        if (props_TypingPredicateParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(":");
          props_TypingPredicateParameter = cpb.create();
        }
        return props_TypingPredicateParameter;
      case LanguageConceptSwitch.TypingPredicateProperties:
        if (props_TypingPredicateProperties == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(":");
          props_TypingPredicateProperties = cpb.create();
        }
        return props_TypingPredicateProperties;
      case LanguageConceptSwitch.TypingPredicateStructMember:
        if (props_TypingPredicateStructMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TypingPredicateStructMember");
          props_TypingPredicateStructMember = cpb.create();
        }
        return props_TypingPredicateStructMember;
      case LanguageConceptSwitch.VarIn:
        if (props_VarIn == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VarIn");
          props_VarIn = cpb.create();
        }
        return props_VarIn;
      case LanguageConceptSwitch.WhileInstruction:
        if (props_WhileInstruction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("while");
          props_WhileInstruction = cpb.create();
        }
        return props_WhileInstruction;
      case LanguageConceptSwitch.block_timestamp:
        if (props_block_timestamp == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("block_timestamp");
          props_block_timestamp = cpb.create();
        }
        return props_block_timestamp;
      case LanguageConceptSwitch.enumMember:
        if (props_enumMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("enumMember");
          props_enumMember = cpb.create();
        }
        return props_enumMember;
      case LanguageConceptSwitch.pred:
        if (props_pred == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("pred");
          props_pred = cpb.create();
        }
        return props_pred;
      case LanguageConceptSwitch.revert:
        if (props_revert == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("revert");
          props_revert = cpb.create();
        }
        return props_revert;
      case LanguageConceptSwitch.succ:
        if (props_succ == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("succ");
          props_succ = cpb.create();
        }
        return props_succ;
      case LanguageConceptSwitch.userDefinedSet:
        if (props_userDefinedSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_userDefinedSet = cpb.create();
        }
        return props_userDefinedSet;
    }
    return null;
  }
}
