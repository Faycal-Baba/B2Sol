package B.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptArithmeticBinaryExpression = createDescriptorForArithmeticBinaryExpression();
  /*package*/ final ConceptDescriptor myConceptArrayElement = createDescriptorForArrayElement();
  /*package*/ final ConceptDescriptor myConceptBAddress = createDescriptorForBAddress();
  /*package*/ final ConceptDescriptor myConceptBAndExpression = createDescriptorForBAndExpression();
  /*package*/ final ConceptDescriptor myConceptBBalanceOf = createDescriptorForBBalanceOf();
  /*package*/ final ConceptDescriptor myConceptBBinaryExpression = createDescriptorForBBinaryExpression();
  /*package*/ final ConceptDescriptor myConceptBBinaryLogicalExpression = createDescriptorForBBinaryLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptBBool = createDescriptorForBBool();
  /*package*/ final ConceptDescriptor myConceptBBytes = createDescriptorForBBytes();
  /*package*/ final ConceptDescriptor myConceptBDivExpression = createDescriptorForBDivExpression();
  /*package*/ final ConceptDescriptor myConceptBEqualExpression = createDescriptorForBEqualExpression();
  /*package*/ final ConceptDescriptor myConceptBExpression = createDescriptorForBExpression();
  /*package*/ final ConceptDescriptor myConceptBFalseExpression = createDescriptorForBFalseExpression();
  /*package*/ final ConceptDescriptor myConceptBGreaterThanExpression = createDescriptorForBGreaterThanExpression();
  /*package*/ final ConceptDescriptor myConceptBGreaterThanOrEqualExpression = createDescriptorForBGreaterThanOrEqualExpression();
  /*package*/ final ConceptDescriptor myConceptBIdentifier = createDescriptorForBIdentifier();
  /*package*/ final ConceptDescriptor myConceptBInequalExpression = createDescriptorForBInequalExpression();
  /*package*/ final ConceptDescriptor myConceptBInteger = createDescriptorForBInteger();
  /*package*/ final ConceptDescriptor myConceptBIntegerLiteral = createDescriptorForBIntegerLiteral();
  /*package*/ final ConceptDescriptor myConceptBLessThanExpression = createDescriptorForBLessThanExpression();
  /*package*/ final ConceptDescriptor myConceptBLessThanOrEqualExpression = createDescriptorForBLessThanOrEqualExpression();
  /*package*/ final ConceptDescriptor myConceptBLhsExpression = createDescriptorForBLhsExpression();
  /*package*/ final ConceptDescriptor myConceptBLogicalExpression = createDescriptorForBLogicalExpression();
  /*package*/ final ConceptDescriptor myConceptBMinusExpression = createDescriptorForBMinusExpression();
  /*package*/ final ConceptDescriptor myConceptBMultExpression = createDescriptorForBMultExpression();
  /*package*/ final ConceptDescriptor myConceptBNatural = createDescriptorForBNatural();
  /*package*/ final ConceptDescriptor myConceptBNotExpression = createDescriptorForBNotExpression();
  /*package*/ final ConceptDescriptor myConceptBOrExpression = createDescriptorForBOrExpression();
  /*package*/ final ConceptDescriptor myConceptBPlusExpression = createDescriptorForBPlusExpression();
  /*package*/ final ConceptDescriptor myConceptBSender = createDescriptorForBSender();
  /*package*/ final ConceptDescriptor myConceptBSpaceChar = createDescriptorForBSpaceChar();
  /*package*/ final ConceptDescriptor myConceptBString = createDescriptorForBString();
  /*package*/ final ConceptDescriptor myConceptBStringLiteral = createDescriptorForBStringLiteral();
  /*package*/ final ConceptDescriptor myConceptBTrueExpression = createDescriptorForBTrueExpression();
  /*package*/ final ConceptDescriptor myConceptBValue = createDescriptorForBValue();
  /*package*/ final ConceptDescriptor myConceptBecomesSubstitution = createDescriptorForBecomesSubstitution();
  /*package*/ final ConceptDescriptor myConceptConstantValuation = createDescriptorForConstantValuation();
  /*package*/ final ConceptDescriptor myConceptElseIf = createDescriptorForElseIf();
  /*package*/ final ConceptDescriptor myConceptEmptyLine = createDescriptorForEmptyLine();
  /*package*/ final ConceptDescriptor myConceptEmptySubsitution = createDescriptorForEmptySubsitution();
  /*package*/ final ConceptDescriptor myConceptEnumeratedSet = createDescriptorForEnumeratedSet();
  /*package*/ final ConceptDescriptor myConceptFunction = createDescriptorForFunction();
  /*package*/ final ConceptDescriptor myConceptIfSubstitution = createDescriptorForIfSubstitution();
  /*package*/ final ConceptDescriptor myConceptInitialisation = createDescriptorForInitialisation();
  /*package*/ final ConceptDescriptor myConceptMachine = createDescriptorForMachine();
  /*package*/ final ConceptDescriptor myConceptOperation = createDescriptorForOperation();
  /*package*/ final ConceptDescriptor myConceptPredicate = createDescriptorForPredicate();
  /*package*/ final ConceptDescriptor myConceptReturnSubstitution = createDescriptorForReturnSubstitution();
  /*package*/ final ConceptDescriptor myConceptSet = createDescriptorForSet();
  /*package*/ final ConceptDescriptor myConceptSolidityGlobalVariables = createDescriptorForSolidityGlobalVariables();
  /*package*/ final ConceptDescriptor myConceptStructSet = createDescriptorForStructSet();
  /*package*/ final ConceptDescriptor myConceptSubstitution = createDescriptorForSubstitution();
  /*package*/ final ConceptDescriptor myConceptTransferOperation = createDescriptorForTransferOperation();
  /*package*/ final ConceptDescriptor myConceptTypingPredicate = createDescriptorForTypingPredicate();
  /*package*/ final ConceptDescriptor myConceptTypingPredicateInvariant = createDescriptorForTypingPredicateInvariant();
  /*package*/ final ConceptDescriptor myConceptTypingPredicateParameter = createDescriptorForTypingPredicateParameter();
  /*package*/ final ConceptDescriptor myConceptTypingPredicateProperties = createDescriptorForTypingPredicateProperties();
  /*package*/ final ConceptDescriptor myConceptTypingPredicateStructMember = createDescriptorForTypingPredicateStructMember();
  /*package*/ final ConceptDescriptor myConceptWhileSubstitution = createDescriptorForWhileSubstitution();
  /*package*/ final ConceptDescriptor myConceptfunctionElemnent = createDescriptorForfunctionElemnent();
  /*package*/ final ConceptDescriptor myConceptpred = createDescriptorForpred();
  /*package*/ final ConceptDescriptor myConceptsucc = createDescriptorForsucc();
  /*package*/ final ConceptDescriptor myConceptuserDefinedSet = createDescriptorForuserDefinedSet();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptArithmeticBinaryExpression, myConceptArrayElement, myConceptBAddress, myConceptBAndExpression, myConceptBBalanceOf, myConceptBBinaryExpression, myConceptBBinaryLogicalExpression, myConceptBBool, myConceptBBytes, myConceptBDivExpression, myConceptBEqualExpression, myConceptBExpression, myConceptBFalseExpression, myConceptBGreaterThanExpression, myConceptBGreaterThanOrEqualExpression, myConceptBIdentifier, myConceptBInequalExpression, myConceptBInteger, myConceptBIntegerLiteral, myConceptBLessThanExpression, myConceptBLessThanOrEqualExpression, myConceptBLhsExpression, myConceptBLogicalExpression, myConceptBMinusExpression, myConceptBMultExpression, myConceptBNatural, myConceptBNotExpression, myConceptBOrExpression, myConceptBPlusExpression, myConceptBSender, myConceptBSpaceChar, myConceptBString, myConceptBStringLiteral, myConceptBTrueExpression, myConceptBValue, myConceptBecomesSubstitution, myConceptConstantValuation, myConceptElseIf, myConceptEmptyLine, myConceptEmptySubsitution, myConceptEnumeratedSet, myConceptFunction, myConceptIfSubstitution, myConceptInitialisation, myConceptMachine, myConceptOperation, myConceptPredicate, myConceptReturnSubstitution, myConceptSet, myConceptSolidityGlobalVariables, myConceptStructSet, myConceptSubstitution, myConceptTransferOperation, myConceptTypingPredicate, myConceptTypingPredicateInvariant, myConceptTypingPredicateParameter, myConceptTypingPredicateProperties, myConceptTypingPredicateStructMember, myConceptWhileSubstitution, myConceptfunctionElemnent, myConceptpred, myConceptsucc, myConceptuserDefinedSet);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ArithmeticBinaryExpression:
        return myConceptArithmeticBinaryExpression;
      case LanguageConceptSwitch.ArrayElement:
        return myConceptArrayElement;
      case LanguageConceptSwitch.BAddress:
        return myConceptBAddress;
      case LanguageConceptSwitch.BAndExpression:
        return myConceptBAndExpression;
      case LanguageConceptSwitch.BBalanceOf:
        return myConceptBBalanceOf;
      case LanguageConceptSwitch.BBinaryExpression:
        return myConceptBBinaryExpression;
      case LanguageConceptSwitch.BBinaryLogicalExpression:
        return myConceptBBinaryLogicalExpression;
      case LanguageConceptSwitch.BBool:
        return myConceptBBool;
      case LanguageConceptSwitch.BBytes:
        return myConceptBBytes;
      case LanguageConceptSwitch.BDivExpression:
        return myConceptBDivExpression;
      case LanguageConceptSwitch.BEqualExpression:
        return myConceptBEqualExpression;
      case LanguageConceptSwitch.BExpression:
        return myConceptBExpression;
      case LanguageConceptSwitch.BFalseExpression:
        return myConceptBFalseExpression;
      case LanguageConceptSwitch.BGreaterThanExpression:
        return myConceptBGreaterThanExpression;
      case LanguageConceptSwitch.BGreaterThanOrEqualExpression:
        return myConceptBGreaterThanOrEqualExpression;
      case LanguageConceptSwitch.BIdentifier:
        return myConceptBIdentifier;
      case LanguageConceptSwitch.BInequalExpression:
        return myConceptBInequalExpression;
      case LanguageConceptSwitch.BInteger:
        return myConceptBInteger;
      case LanguageConceptSwitch.BIntegerLiteral:
        return myConceptBIntegerLiteral;
      case LanguageConceptSwitch.BLessThanExpression:
        return myConceptBLessThanExpression;
      case LanguageConceptSwitch.BLessThanOrEqualExpression:
        return myConceptBLessThanOrEqualExpression;
      case LanguageConceptSwitch.BLhsExpression:
        return myConceptBLhsExpression;
      case LanguageConceptSwitch.BLogicalExpression:
        return myConceptBLogicalExpression;
      case LanguageConceptSwitch.BMinusExpression:
        return myConceptBMinusExpression;
      case LanguageConceptSwitch.BMultExpression:
        return myConceptBMultExpression;
      case LanguageConceptSwitch.BNatural:
        return myConceptBNatural;
      case LanguageConceptSwitch.BNotExpression:
        return myConceptBNotExpression;
      case LanguageConceptSwitch.BOrExpression:
        return myConceptBOrExpression;
      case LanguageConceptSwitch.BPlusExpression:
        return myConceptBPlusExpression;
      case LanguageConceptSwitch.BSender:
        return myConceptBSender;
      case LanguageConceptSwitch.BSpaceChar:
        return myConceptBSpaceChar;
      case LanguageConceptSwitch.BString:
        return myConceptBString;
      case LanguageConceptSwitch.BStringLiteral:
        return myConceptBStringLiteral;
      case LanguageConceptSwitch.BTrueExpression:
        return myConceptBTrueExpression;
      case LanguageConceptSwitch.BValue:
        return myConceptBValue;
      case LanguageConceptSwitch.BecomesSubstitution:
        return myConceptBecomesSubstitution;
      case LanguageConceptSwitch.ConstantValuation:
        return myConceptConstantValuation;
      case LanguageConceptSwitch.ElseIf:
        return myConceptElseIf;
      case LanguageConceptSwitch.EmptyLine:
        return myConceptEmptyLine;
      case LanguageConceptSwitch.EmptySubsitution:
        return myConceptEmptySubsitution;
      case LanguageConceptSwitch.EnumeratedSet:
        return myConceptEnumeratedSet;
      case LanguageConceptSwitch.Function:
        return myConceptFunction;
      case LanguageConceptSwitch.IfSubstitution:
        return myConceptIfSubstitution;
      case LanguageConceptSwitch.Initialisation:
        return myConceptInitialisation;
      case LanguageConceptSwitch.Machine:
        return myConceptMachine;
      case LanguageConceptSwitch.Operation:
        return myConceptOperation;
      case LanguageConceptSwitch.Predicate:
        return myConceptPredicate;
      case LanguageConceptSwitch.ReturnSubstitution:
        return myConceptReturnSubstitution;
      case LanguageConceptSwitch.Set:
        return myConceptSet;
      case LanguageConceptSwitch.SolidityGlobalVariables:
        return myConceptSolidityGlobalVariables;
      case LanguageConceptSwitch.StructSet:
        return myConceptStructSet;
      case LanguageConceptSwitch.Substitution:
        return myConceptSubstitution;
      case LanguageConceptSwitch.TransferOperation:
        return myConceptTransferOperation;
      case LanguageConceptSwitch.TypingPredicate:
        return myConceptTypingPredicate;
      case LanguageConceptSwitch.TypingPredicateInvariant:
        return myConceptTypingPredicateInvariant;
      case LanguageConceptSwitch.TypingPredicateParameter:
        return myConceptTypingPredicateParameter;
      case LanguageConceptSwitch.TypingPredicateProperties:
        return myConceptTypingPredicateProperties;
      case LanguageConceptSwitch.TypingPredicateStructMember:
        return myConceptTypingPredicateStructMember;
      case LanguageConceptSwitch.WhileSubstitution:
        return myConceptWhileSubstitution;
      case LanguageConceptSwitch.functionElemnent:
        return myConceptfunctionElemnent;
      case LanguageConceptSwitch.pred:
        return myConceptpred;
      case LanguageConceptSwitch.succ:
        return myConceptsucc;
      case LanguageConceptSwitch.userDefinedSet:
        return myConceptuserDefinedSet;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForArithmeticBinaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "ArithmeticBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c69959eb6dL);
    b.class_(false, true, false);
    b.super_("B.structure.BBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911829478253");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayElement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "ArrayElement", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x22386bbff832ba6aL);
    b.class_(false, false, false);
    b.super_("B.structure.BLhsExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x22386bbff83276fbL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/2465839268232346218");
    b.version(2);
    b.aggregate("iden", 0x22386bbff832ba6bL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(false).ordered(true).multiple(false).origin("2465839268232346219").done();
    b.aggregate("expr", 0x22386bbff832ba6dL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("2465839268232346221").done();
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBAddress() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BAddress", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127aL);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511418");
    b.version(2);
    b.alias("ADDRESS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBAndExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BAndExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756970L);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337072");
    b.version(2);
    b.alias("&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBalanceOf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BBalanceOf", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6eb31L);
    b.class_(false, false, false);
    b.super_("B.structure.SolidityGlobalVariables", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc0fL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911818795825");
    b.version(2);
    b.aggregate("name", 0x62dd0bd8e6ab9332L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("7123863211780838194").done();
    b.alias("balanceOf");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBinaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L);
    b.class_(false, true, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337060");
    b.version(2);
    b.aggregate("left", 0x7d382cf97c756965L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303483337061").done();
    b.aggregate("right", 0x7d382cf97c756967L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303483337063").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBinaryLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756964L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911828601435");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBool() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BBool", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127bL);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511419");
    b.version(2);
    b.alias("BOOL");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBBytes() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BBytes", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781279L);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511417");
    b.version(2);
    b.alias("BYTES");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBDivExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BDivExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696fL);
    b.class_(false, false, false);
    b.super_("B.structure.ArithmeticBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c69959eb6dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337071");
    b.version(2);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BEqualExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698bb42c7L);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911819080391");
    b.version(2);
    b.alias("=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.class_(false, true, false);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337057");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBFalseExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BFalseExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696bL);
    b.class_(false, false, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337067");
    b.version(2);
    b.alias("FALSE");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBGreaterThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BGreaterThanExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756974L);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337076");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBGreaterThanOrEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BGreaterThanOrEqualExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756975L);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337077");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBIdentifier() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BIdentifier", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L);
    b.class_(false, false, false);
    b.super_("B.structure.BLhsExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x22386bbff83276fbL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337081");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBInequalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BInequalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698d4fe1eL);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911820766750");
    b.version(2);
    b.alias("/=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BInteger", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781277L);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511415");
    b.version(2);
    b.alias("INTl");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBIntegerLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BIntegerLiteral", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a015L);
    b.class_(false, false, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483351061");
    b.version(2);
    b.property("value", 0x7d382cf97c75a016L).type(PrimitiveTypeId.STRING).origin("9023011303483351062").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBLessThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BLessThanExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756972L);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337074");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBLessThanOrEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BLessThanOrEqualExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756973L);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337075");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBLhsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BLhsExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x22386bbff83276fbL);
    b.class_(false, true, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/2465839268232328955");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBLogicalExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c69949b88dL);
    b.class_(false, true, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911828416653");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BMinusExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696dL);
    b.class_(false, false, false);
    b.super_("B.structure.ArithmeticBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c69959eb6dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337069");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBMultExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BMultExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696eL);
    b.class_(false, false, false);
    b.super_("B.structure.ArithmeticBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c69959eb6dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337070");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBNatural() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BNatural", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781278L);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511416");
    b.version(2);
    b.alias("NATURAL");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBNotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BNotExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756976L);
    b.class_(false, false, false);
    b.super_("B.structure.BLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c69949b88dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337078");
    b.version(2);
    b.aggregate("expr", 0x7d382cf97c756977L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303483337079").done();
    b.alias("not");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBOrExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BOrExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756971L);
    b.class_(false, false, false);
    b.super_("B.structure.BBinaryLogicalExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6994c8a5bL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337073");
    b.version(2);
    b.alias("or");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BPlusExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696cL);
    b.class_(false, false, false);
    b.super_("B.structure.ArithmeticBinaryExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c69959eb6dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337068");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBSender() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BSender", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc13L);
    b.class_(false, false, false);
    b.super_("B.structure.SolidityGlobalVariables", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc0fL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911818787859");
    b.version(2);
    b.alias("msg'sender");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBSpaceChar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BSpaceChar", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01bL);
    b.class_(false, false, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483351067");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBString() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BString", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127cL);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511420");
    b.version(2);
    b.alias("STRING");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BStringLiteral", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a018L);
    b.class_(false, false, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483351064");
    b.version(2);
    b.property("value", 0x7d382cf97c75a019L).type(PrimitiveTypeId.STRING).origin("9023011303483351065").done();
    b.alias("\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBTrueExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BTrueExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75696aL);
    b.class_(false, false, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483337066");
    b.version(2);
    b.alias("TRUE");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BValue", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc12L);
    b.class_(false, false, false);
    b.super_("B.structure.SolidityGlobalVariables", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc0fL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911818787858");
    b.version(2);
    b.alias("msg'value");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBecomesSubstitution() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "BecomesSubstitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d05L);
    b.class_(false, false, false);
    b.super_("B.structure.Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483849989");
    b.version(2);
    b.aggregate("lhs", 0x7d382cf97c7d3d0cL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x22386bbff83276fbL).optional(false).ordered(true).multiple(false).origin("9023011303483849996").done();
    b.aggregate("expr", 0x7d382cf97c7d3d0eL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303483849998").done();
    b.alias(":=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstantValuation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "ConstantValuation", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x62dd0bd8e6cc1b0bL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7123863211782970123");
    b.version(2);
    b.aggregate("set", 0x62dd0bd8e6cc1b0eL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L).optional(false).ordered(true).multiple(false).origin("7123863211782970126").done();
    b.aggregate("value", 0x62dd0bd8e6cc1b10L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("7123863211782970128").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForElseIf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "ElseIf", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1ace29e015cd4415L);
    b.class_(false, false, false);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/1931527332603708437");
    b.version(2);
    b.aggregate("condition", 0x1ace29e015cd4416L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("1931527332603708438").done();
    b.aggregate("substitutions", 0x1ace29e015cd4418L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L).optional(true).ordered(true).multiple(true).origin("1931527332603708440").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "EmptyLine", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1ace29e015ce0b90L);
    b.class_(false, false, false);
    b.super_("B.structure.Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/1931527332603759504");
    b.version(2);
    b.alias(" ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptySubsitution() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "EmptySubsitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1ace29e01608fc23L);
    b.class_(false, false, false);
    b.super_("B.structure.Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/1931527332607622179");
    b.version(2);
    b.alias(" ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnumeratedSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "EnumeratedSet", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c774b48L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483460424");
    b.version(2);
    b.aggregate("elements", 0x7d382cf97c774b4bL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(false).ordered(true).multiple(true).origin("9023011303483460427").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "Function", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c784996L);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483525526");
    b.version(2);
    b.aggregate("keyType", 0x7d382cf97c784997L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L).optional(false).ordered(true).multiple(false).origin("9023011303483525527").done();
    b.aggregate("valueType", 0x7d382cf97c784999L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L).optional(false).ordered(true).multiple(false).origin("9023011303483525529").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfSubstitution() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "IfSubstitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4dL);
    b.class_(false, false, false);
    b.super_("B.structure.Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483850061");
    b.version(2);
    b.aggregate("condition", 0x7d382cf97c7d3d5dL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303483850077").done();
    b.aggregate("IfTrueBranch", 0x7d382cf97c7d49ddL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L).optional(true).ordered(true).multiple(true).origin("9023011303483853277").done();
    b.aggregate("elseIfs", 0x1ace29e015cd441bL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x1ace29e015cd4415L).optional(true).ordered(true).multiple(true).origin("1931527332603708443").done();
    b.aggregate("ElseBranch", 0x7d382cf97c7d49e0L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L).optional(true).ordered(true).multiple(true).origin("9023011303483853280").done();
    b.alias("IF");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInitialisation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "Initialisation", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6993c5af9L);
    b.class_(false, false, false);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911827540729");
    b.version(2);
    b.aggregate("body", 0x1ace29e015ec1316L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L).optional(true).ordered(true).multiple(true).origin("1931527332605727510").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMachine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "Machine", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c75a01cL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483351068");
    b.version(2);
    b.aggregate("enumeratedSets", 0x7d382cf97c774bb2L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c774b48L).optional(true).ordered(true).multiple(true).origin("9023011303483460530").done();
    b.aggregate("constants", 0x7d382cf97c777b1fL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(true).ordered(true).multiple(true).origin("9023011303483472671").done();
    b.aggregate("variables", 0x7d382cf97c777b1cL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(true).ordered(true).multiple(true).origin("9023011303483472668").done();
    b.aggregate("properties", 0x7d382cf97c7c15b5L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd8L).optional(true).ordered(true).multiple(true).origin("9023011303483774389").done();
    b.aggregate("values", 0x62dd0bd8e6c6e2a3L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x62dd0bd8e6cc1b0bL).optional(true).ordered(true).multiple(true).origin("7123863211782628003").done();
    b.aggregate("invariant", 0x7d382cf97c7c15baL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd7L).optional(true).ordered(true).multiple(true).origin("9023011303483774394").done();
    b.aggregate("initialisation", 0x7d382cf97c816c19L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c6993c5af9L).optional(false).ordered(true).multiple(false).origin("9023011303484124185").done();
    b.aggregate("operations", 0x6d3985c698b0194fL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L).optional(true).ordered(true).multiple(true).origin("7870468911818348879").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "Operation", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911817957430");
    b.version(2);
    b.aggregate("inputParameters", 0x6d3985c698ada694L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(true).ordered(true).multiple(true).origin("7870468911818188436").done();
    b.aggregate("typingPredicates", 0x6d3985c698ada699L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd9L).optional(true).ordered(true).multiple(true).origin("7870468911818188441").done();
    b.aggregate("preconditions", 0x6d3985c698ada69dL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4eL).optional(true).ordered(true).multiple(true).origin("7870468911818188445").done();
    b.aggregate("body", 0x6d3985c698ada6a2L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L).optional(true).ordered(true).multiple(true).origin("7870468911818188450").done();
    b.aggregate("outputParamType", 0x21300da940bef9e9L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd9L).optional(true).ordered(true).multiple(true).origin("2391426422720625129").done();
    b.aggregate("outputParams", 0x3eec413fb539bf07L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(true).ordered(true).multiple(true).origin("4534070666734452487").done();
    b.alias("op");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredicate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "Predicate", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d4eL);
    b.class_(false, false, false);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483850062");
    b.version(2);
    b.aggregate("expr", 0x7d382cf97c7d3d4fL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303483850063").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReturnSubstitution() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "ReturnSubstitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4763978eL);
    b.class_(false, false, false);
    b.super_("B.structure.Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/4400130971599607694");
    b.version(2);
    b.aggregate("outputParams", 0x3d1067ce4763978fL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(false).ordered(true).multiple(true).origin("4400130971599607695").done();
    b.aggregate("expressions", 0x3d1067ce47639791L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(true).origin("4400130971599607697").done();
    b.alias("ret");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.class_(false, true, false);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511412");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSolidityGlobalVariables() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "SolidityGlobalVariables", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698b6cc0fL);
    b.class_(false, true, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911818787855");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStructSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "StructSet", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce4782bb49L);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/4400130971601648457");
    b.version(2);
    b.aggregate("elements", 0x3d1067ce4782bb4aL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2df43d4e0665706cL).optional(false).ordered(true).multiple(true).origin("4400130971601648458").done();
    b.alias("struct");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSubstitution() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.class_(false, true, false);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483849986");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTransferOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "TransferOperation", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L);
    b.class_(false, false, false);
    b.super_("B.structure.Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/4400130971599607541");
    b.version(2);
    b.aggregate("from", 0x3d1067ce476396f8L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("4400130971599607544").done();
    b.aggregate("to", 0x3d1067ce476396feL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("4400130971599607550").done();
    b.aggregate("amount", 0x3d1067ce47639701L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("4400130971599607553").done();
    b.alias("transfer");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypingPredicate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "TypingPredicate", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL);
    b.class_(false, true, false);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511405");
    b.version(2);
    b.aggregate("name", 0x7d382cf97c78126eL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L).optional(false).ordered(true).multiple(false).origin("9023011303483511406").done();
    b.aggregate("set", 0x7d382cf97c7b862fL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L).optional(false).ordered(true).multiple(false).origin("9023011303483737647").done();
    b.alias(":");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypingPredicateInvariant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "TypingPredicateInvariant", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd7L);
    b.class_(false, false, false);
    b.super_("B.structure.TypingPredicate", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911822622167");
    b.version(2);
    b.alias(":");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypingPredicateParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "TypingPredicateParameter", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd9L);
    b.class_(false, false, false);
    b.super_("B.structure.TypingPredicate", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911822622169");
    b.version(2);
    b.alias(":");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypingPredicateProperties() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "TypingPredicateProperties", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698f14dd8L);
    b.class_(false, false, false);
    b.super_("B.structure.TypingPredicate", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/7870468911822622168");
    b.version(2);
    b.alias(":");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypingPredicateStructMember() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "TypingPredicateStructMember", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2df43d4e0665706cL);
    b.class_(false, false, false);
    b.super_("B.structure.TypingPredicate", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78126dL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/3311339031348211820");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhileSubstitution() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "WhileSubstitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c801d46L);
    b.class_(false, false, false);
    b.super_("B.structure.Substitution", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303484038470");
    b.version(2);
    b.aggregate("condition", 0x7d382cf97c801d47L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303484038471").done();
    b.aggregate("body", 0x7d382cf97c801d49L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c7d3d02L).optional(true).ordered(true).multiple(true).origin("9023011303484038473").done();
    b.aggregate("invariant", 0x7d382cf97c802047L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303484039239").done();
    b.aggregate("variant", 0x7d382cf97c80204bL).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("9023011303484039243").done();
    b.alias("while");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForfunctionElemnent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "functionElemnent", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28d5251170d69ec4L);
    b.class_(false, false, false);
    b.super_("B.structure.BLhsExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x22386bbff83276fbL);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/2942298688394272452");
    b.version(2);
    b.aggregate("function", 0x62dd0bd8e6994573L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x22386bbff83276fbL).optional(false).ordered(true).multiple(false).origin("7123863211779638643").done();
    b.aggregate("antecedant", 0x62dd0bd8e6994575L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("7123863211779638645").done();
    b.alias("fun");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForpred() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "pred", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541ae44fL);
    b.class_(false, false, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/3304500057442280527");
    b.version(2);
    b.aggregate("expr", 0x2ddbf14b541ae450L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("3304500057442280528").done();
    b.alias("pred");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForsucc() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "succ", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x2ddbf14b541b29e2L);
    b.class_(false, false, false);
    b.super_("B.structure.BExpression", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/3304500057442298338");
    b.version(2);
    b.aggregate("expr", 0x2ddbf14b541b29e3L).target(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756961L).optional(false).ordered(true).multiple(false).origin("3304500057442298339").done();
    b.alias("succ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForuserDefinedSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("B", "userDefinedSet", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c78127dL);
    b.class_(false, false, false);
    b.super_("B.structure.Set", 0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c781274L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:d2874149-b575-42a9-9e66-bd8f0639a7d2(B.structure)/9023011303483511421");
    b.version(2);
    return b.create();
  }
}
