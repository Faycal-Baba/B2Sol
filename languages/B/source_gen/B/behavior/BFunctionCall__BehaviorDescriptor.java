package B.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class BFunctionCall__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd1487b1L, "B.structure.BFunctionCall");

  public static final SMethod<Void> setFunctionName_id2zX142X58vQ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setFunctionName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2zX142X58vQ").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> setFunctionName_id2zX142X9kI5 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setFunctionName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2zX142X9kI5").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> addExpr_id2zX142X5aDF = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addExpr").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2zX142X5aDF").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(setFunctionName_id2zX142X58vQ, setFunctionName_id2zX142X9kI5, addExpr_id2zX142X5aDF);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void setFunctionName_id2zX142X58vQ(@NotNull SNode __thisNode__, String functionName) {
    SNode id = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
    BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(id, functionName);
    SLinkOperations.setTarget(__thisNode__, LINKS.functionName$j0sr, id);
  }
  /*package*/ static void setFunctionName_id2zX142X9kI5(@NotNull SNode __thisNode__, SNode id) {
    SLinkOperations.setTarget(__thisNode__, LINKS.functionName$j0sr, id);
  }
  /*package*/ static void addExpr_id2zX142X5aDF(@NotNull SNode __thisNode__, SNode expression) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.inputParameters$j5PM)).addElement(expression);
  }

  /*package*/ BFunctionCall__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        setFunctionName_id2zX142X58vQ(node, (String) parameters[0]);
        return null;
      case 1:
        setFunctionName_id2zX142X9kI5(node, (SNode) parameters[0]);
        return null;
      case 2:
        addExpr_id2zX142X5aDF(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink functionName$j0sr = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd1487b1L, 0x28fd0440bd1487b2L, "functionName");
    /*package*/ static final SContainmentLink inputParameters$j5PM = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd1487b1L, 0x28fd0440bd1487b4L, "inputParameters");
  }
}
