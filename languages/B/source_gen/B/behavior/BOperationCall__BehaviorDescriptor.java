package B.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class BOperationCall__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd130eaaL, "B.structure.BOperationCall");

  public static final SMethod<Void> setVarName_id2zX142X9hUS = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setVarName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2zX142X9hUS").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> setFunctionName_id2zX142X9kny = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setFunctionName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2zX142X9kny").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> addExpr_id6XUR3mjAgZs = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addExpr").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6XUR3mjAgZs").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> setFunction_id2mhMzvQx9SZ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setFunction").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2mhMzvQx9SZ").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(setVarName_id2zX142X9hUS, setFunctionName_id2zX142X9kny, addExpr_id6XUR3mjAgZs, setFunction_id2mhMzvQx9SZ);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void setVarName_id2zX142X9hUS(@NotNull SNode __thisNode__, String name_) {
    SNode name = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x7d382cf97c756979L, "B.structure.BIdentifier"));
    BIdentifier__BehaviorDescriptor.setName_id7B8mKgzi8Kz.invoke(name, name_);
    SLinkOperations.setTarget(__thisNode__, LINKS.identifier$hFuV, name);
  }
  /*package*/ static void setFunctionName_id2zX142X9kny(@NotNull SNode __thisNode__, String name) {
    BFunctionCall__BehaviorDescriptor.setFunctionName_id2zX142X58vQ.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.functionCall$hKSi), name);
  }
  /*package*/ static void addExpr_id6XUR3mjAgZs(@NotNull SNode __thisNode__, SNode expr_) {
    BFunctionCall__BehaviorDescriptor.addExpr_id2zX142X5aDF.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.functionCall$hKSi), expr_);
  }
  /*package*/ static void setFunction_id2mhMzvQx9SZ(@NotNull SNode __thisNode__, SNode bFunCall) {
    SLinkOperations.setTarget(__thisNode__, LINKS.functionCall$hKSi, bFunCall);
  }

  /*package*/ BOperationCall__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        setVarName_id2zX142X9hUS(node, (String) parameters[0]);
        return null;
      case 1:
        setFunctionName_id2zX142X9kny(node, (String) parameters[0]);
        return null;
      case 2:
        addExpr_id6XUR3mjAgZs(node, (SNode) parameters[0]);
        return null;
      case 3:
        setFunction_id2mhMzvQx9SZ(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink identifier$hFuV = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd130eaaL, 0x28fd0440bd130eabL, "identifier");
    /*package*/ static final SContainmentLink functionCall$hKSi = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x28fd0440bd130eaaL, 0x28fd0440bd130eadL, "functionCall");
  }
}
