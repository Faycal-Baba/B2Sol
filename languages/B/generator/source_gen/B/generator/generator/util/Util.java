package B.generator.generator.util;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import B.behavior.StructSet__BehaviorDescriptor;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class Util {

  public static List<SNode> outputparamlist;

  public static int structCounter = 1;

  public static Map<SNode, String> structNames;

  public static String structName = "struct_def_";


  public Util() {
    outputparamlist = new ArrayList<SNode>();
  }

  public static boolean isPayable(SNode operation) {
    for (SNode st : ListSequence.fromList(SLinkOperations.getChildren(operation, LINKS.body$4v9z))) {
      if (st instanceof SNode) {
        SNode node = ((SNode) st);
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, LINKS.to$g5So), CONCEPTS.THIS$mL)) {
          return true;
        }
      }
    }
    return false;
  }

  public static String getName(SNode set) {
    if (structNames == null) {
      return setName(set);
    } else {
      if (checkIfSetExists(set)) {
        for (SNode e : SetSequence.fromSet(MapSequence.fromMap(structNames).keySet())) {
          if ((boolean) StructSet__BehaviorDescriptor.equals_id7E1Po1byfmE.invoke(e, set)) {
            return MapSequence.fromMap(structNames).get(e);
          }
        }
      }
    }
    String newStructName = structName + structCounter;
    structCounter++;
    MapSequence.fromMap(structNames).put(set, newStructName);
    return newStructName;
  }



  public static String setName(SNode newStruct) {
    if (structNames == null) {
      structNames = MapSequence.fromMap(new HashMap<SNode, String>());
    }
    String name = structName + structCounter;
    structCounter++;
    MapSequence.fromMap(structNames).put(newStruct, name);
    return name;
  }

  public static boolean checkIfSetExists(SNode structSet) {
    for (SNode e : SetSequence.fromSet(MapSequence.fromMap(Util.structNames).keySet())) {
      if ((boolean) StructSet__BehaviorDescriptor.equals_id7E1Po1byfmE.invoke(structSet, e)) {
        return true;
      }
    }
    return false;
  }
  public static void clearMemory() {
    structCounter = 1;
    structNames = MapSequence.fromMap(new HashMap<SNode, String>());
  }

  public static boolean isSolEnvVar(SNode id) {
    switch (SPropertyOperations.getString(id, PROPS.name$MnvL)) {
      case "msg_sender":
        return true;
      case "msg_value":
        return true;
      case "block_timestamp":
        return true;
      default:
        return false;
    }


  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink to$g5So = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x3d1067ce476396f5L, 0x3d1067ce476396feL, "to");
    /*package*/ static final SContainmentLink body$4v9z = MetaAdapterFactory.getContainmentLink(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x6d3985c698aa2036L, 0x6d3985c698ada6a2L, "body");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept THIS$mL = MetaAdapterFactory.getConcept(0x17157e91c2e440eaL, 0xaefc3d3bbdd08639L, 0x5b77dc1122c9701L, "B.structure.THIS");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
