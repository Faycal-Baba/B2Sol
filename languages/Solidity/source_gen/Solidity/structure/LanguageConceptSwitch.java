package Solidity.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Address = 0;
  public static final int AddressCast = 1;
  public static final int AndExpression = 2;
  public static final int ArrayPush = 3;
  public static final int ArrayType = 4;
  public static final int AssignementStatement = 5;
  public static final int BalanceOf = 6;
  public static final int BinaryExpression = 7;
  public static final int BlockComment = 8;
  public static final int BlockTimeStamp = 9;
  public static final int Bool = 10;
  public static final int Bytes = 11;
  public static final int Constructor = 12;
  public static final int Contract = 13;
  public static final int ContractPart = 14;
  public static final int DivExpression = 15;
  public static final int DotExpression = 16;
  public static final int EmptyLine = 17;
  public static final int EmptySstatement = 18;
  public static final int EnumDefinition = 19;
  public static final int EnumMember = 20;
  public static final int EqualExpression = 21;
  public static final int Expression = 22;
  public static final int FalseExpression = 23;
  public static final int FunctionCall = 24;
  public static final int FunctionDefinition = 25;
  public static final int GreaterThanExpression = 26;
  public static final int GreaterThanOrEqualExpression = 27;
  public static final int Identifier = 28;
  public static final int IfStatement = 29;
  public static final int ImmuableStateVariableDeclaration = 30;
  public static final int Index = 31;
  public static final int InequalExpression = 32;
  public static final int Integer = 33;
  public static final int IntegerLiteral = 34;
  public static final int LessThanExpression = 35;
  public static final int LessThanOrEqualExpression = 36;
  public static final int LineComment = 37;
  public static final int LocalVarDeclaration = 38;
  public static final int Mapping = 39;
  public static final int MappingElement = 40;
  public static final int MaxUint = 41;
  public static final int MinusExpression = 42;
  public static final int Minusminus = 43;
  public static final int ModuloExpression = 44;
  public static final int MultExpression = 45;
  public static final int NegativeExpression = 46;
  public static final int NotExpression = 47;
  public static final int NullAddress = 48;
  public static final int OrExpression = 49;
  public static final int Parameter = 50;
  public static final int ParameterList = 51;
  public static final int ParenthesisExpression = 52;
  public static final int PayableFunctionDefinition = 53;
  public static final int PlusExpression = 54;
  public static final int Plusplus = 55;
  public static final int PowerExpression = 56;
  public static final int RequireStatement = 57;
  public static final int ReturnStatement = 58;
  public static final int Sender = 59;
  public static final int SolidityGlobalVariables = 60;
  public static final int StateVariableDeclaration = 61;
  public static final int Statement = 62;
  public static final int StatementBlock = 63;
  public static final int String = 64;
  public static final int StringLiteral = 65;
  public static final int StructDefinition = 66;
  public static final int StructMemberDeclaration = 67;
  public static final int TransferStatement = 68;
  public static final int TrueExpression = 69;
  public static final int Type = 70;
  public static final int UInteger = 71;
  public static final int UserType = 72;
  public static final int Value = 73;
  public static final int WhileStatement = 74;
  public static final int revert = 75;
  public static final int structMemberList = 76;
  public static final int thisExpression = 77;
  public static final int varDecExpression = 78;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xf72d32028a4541adL, 0xbb612369f7191040L);
    builder.put(0x6d3985c698be2cdfL, Address);
    builder.put(0x762a85f9c98187adL, AddressCast);
    builder.put(0x6d3985c698bb42b4L, AndExpression);
    builder.put(0x659c33bf0c48a925L, ArrayPush);
    builder.put(0x4e0a79736b1b10efL, ArrayType);
    builder.put(0x6d3985c698be3dc8L, AssignementStatement);
    builder.put(0x6d3985c6995311bbL, BalanceOf);
    builder.put(0x6d3985c698bb42a4L, BinaryExpression);
    builder.put(0x37b0c54a6e947e0cL, BlockComment);
    builder.put(0x775e747952f096e6L, BlockTimeStamp);
    builder.put(0x6d3985c698be2d36L, Bool);
    builder.put(0x6d3985c698be2ce0L, Bytes);
    builder.put(0x6d3985c698be3db8L, Constructor);
    builder.put(0x6d3985c698bd882bL, Contract);
    builder.put(0x6d3985c698bd882eL, ContractPart);
    builder.put(0x6d3985c698bb42b3L, DivExpression);
    builder.put(0x22386bbff835bedbL, DotExpression);
    builder.put(0x6d3985c698ca4933L, EmptyLine);
    builder.put(0x6d3985c6994c8c3bL, EmptySstatement);
    builder.put(0x6d3985c698be637cL, EnumDefinition);
    builder.put(0x775e747952f0b82bL, EnumMember);
    builder.put(0x6d3985c698bb42bbL, EqualExpression);
    builder.put(0x6d3985c698bb3f67L, Expression);
    builder.put(0x6d3985c698bb42c5L, FalseExpression);
    builder.put(0x6d3985c6995cf507L, FunctionCall);
    builder.put(0x6d3985c698bfce2aL, FunctionDefinition);
    builder.put(0x6d3985c698bb42b9L, GreaterThanExpression);
    builder.put(0x6d3985c698bb42baL, GreaterThanOrEqualExpression);
    builder.put(0x6d3985c698bb42beL, Identifier);
    builder.put(0x6d3985c698be3e04L, IfStatement);
    builder.put(0x6d3985c6991d9ee4L, ImmuableStateVariableDeclaration);
    builder.put(0x605b779bcf3767c1L, Index);
    builder.put(0x6d3985c698d506f0L, InequalExpression);
    builder.put(0x6d3985c698bd8896L, Integer);
    builder.put(0x6d3985c698bb42c1L, IntegerLiteral);
    builder.put(0x6d3985c698bb42bcL, LessThanExpression);
    builder.put(0x6d3985c698bb42bdL, LessThanOrEqualExpression);
    builder.put(0x37b0c54a6e88c0ceL, LineComment);
    builder.put(0x34d309d74a2c2517L, LocalVarDeclaration);
    builder.put(0x6d3985c698be2ce1L, Mapping);
    builder.put(0x8724b429f10bb1bL, MappingElement);
    builder.put(0x28fd0440bd05d542L, MaxUint);
    builder.put(0x6d3985c698bb42b1L, MinusExpression);
    builder.put(0x2ddbf14b541e7e1eL, Minusminus);
    builder.put(0x5c24adf26ba5a297L, ModuloExpression);
    builder.put(0x6d3985c698bb42b2L, MultExpression);
    builder.put(0x1345c017d072bbe0L, NegativeExpression);
    builder.put(0x6d3985c698bb42b6L, NotExpression);
    builder.put(0x775e747952e9fd23L, NullAddress);
    builder.put(0x6d3985c698bb42b5L, OrExpression);
    builder.put(0x6d3985c698be6347L, Parameter);
    builder.put(0x6d3985c698be6346L, ParameterList);
    builder.put(0x4bf90534ab28b221L, ParenthesisExpression);
    builder.put(0x6415fe5db89abbdaL, PayableFunctionDefinition);
    builder.put(0x6d3985c698bb42b0L, PlusExpression);
    builder.put(0x2ddbf14b541e7dfeL, Plusplus);
    builder.put(0x5c24adf26ba5a250L, PowerExpression);
    builder.put(0x6d3985c6992389ebL, RequireStatement);
    builder.put(0x6d3985c698be402fL, ReturnStatement);
    builder.put(0x6d3985c6995311b9L, Sender);
    builder.put(0x6d3985c6995303e5L, SolidityGlobalVariables);
    builder.put(0x6d3985c698bd8892L, StateVariableDeclaration);
    builder.put(0x6d3985c698be3dc5L, Statement);
    builder.put(0x1ace29e015db0f9cL, StatementBlock);
    builder.put(0x6d3985c698be2b55L, String);
    builder.put(0x6d3985c698bb42c4L, StringLiteral);
    builder.put(0x3d1067ce47861efaL, StructDefinition);
    builder.put(0x62dd0bd8e6d0e493L, StructMemberDeclaration);
    builder.put(0x3d1067ce4769e0a3L, TransferStatement);
    builder.put(0x6d3985c698bb42c6L, TrueExpression);
    builder.put(0x6d3985c698bd8893L, Type);
    builder.put(0x6d3985c698be2b54L, UInteger);
    builder.put(0x6053c862ba7e9d96L, UserType);
    builder.put(0x6d3985c6995311baL, Value);
    builder.put(0x6d3985c698be3fa9L, WhileStatement);
    builder.put(0x1ddd0b4a057a284eL, revert);
    builder.put(0x6053c862ba6cff37L, structMemberList);
    builder.put(0x147a49e95acddee8L, thisExpression);
    builder.put(0x4fa9440f95cb2a00L, varDecExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
