THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_completed.4,(_f(15) & _f(28) & _f(27) & _f(29) & _f(36) & _f(22) & _f(37) & _f(38) & _f(39) & _f(34) & _f(13) => _f(40));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_completed.3,(_f(15) & _f(28) & _f(27) & _f(29) & _f(36) & _f(12) => _f(34));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_completed.2,(_f(15) & _f(28) & _f(27) & _f(29) & _f(36) & _f(12) => _f(39));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_completed.1,(_f(15) & _f(28) & _f(27) & _f(29) & _f(36) & _f(12) => _f(38));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_refund.4,(_f(15) & _f(27) & _f(28) & _f(29) & _f(30) & _f(22) & _f(31) & _f(32) & _f(33) & _f(34) & _f(13) => _f(35));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_refund.3,(_f(15) & _f(27) & _f(28) & _f(29) & _f(30) & _f(12) => _f(34));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_refund.2,(_f(15) & _f(27) & _f(28) & _f(29) & _f(30) & _f(12) => _f(33));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_refund.1,(_f(15) & _f(27) & _f(28) & _f(29) & _f(30) & _f(12) => _f(32));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_payement.4,(_f(15) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(8) & _f(22) & _f(23) & _f(24) & _f(25) & _f(13) => _f(26));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_payement.3,(_f(15) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(12) => _f(25));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_payement.2,(_f(15) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(12) => _f(24));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_payement.1,(_f(15) & _f(16) & _f(17) & _f(18) & _f(19) & _f(20) & _f(21) & _f(12) => _f(23));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_testMapping.2,(_f(8) & _f(9) & _f(10) & _f(11) & _f(13) => _f(14));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(6) & _f(7) & Operation_testMapping.1,(_f(8) & _f(9) & _f(10) & _f(12) => _f(11))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((1..6)*{ADDRESS}): FIN(NATURAL*{ADDRESS})& not(((1..6)*{ADDRESS}) = {}) & BYTES: FIN(INTEGER) & not(BYTES = {}) & ((USERS) = ((((1..6)*{ADDRESS}) - ({(2|->ADDRESS)})))) & ((init_msg_sender) : (USERS)) & ((init_msg_value) : (NAT)) & ((init_block_timestamp) : (NAT));
((1..4)*{process_state}): FIN(NATURAL*{process_state})& not(((1..4)*{process_state}) = {}) & ((seller_) : (USERS)) & ((buyer_) : (USERS)) & ((amount_) : (NAT));
((seller_) : (USERS)) & ((buyer_) : (USERS)) & ((amount_) : (NAT));
balanceOf$1 : ((1..6)*{ADDRESS}) +-> NAT & dom(balanceOf$1) = ((1..6)*{ADDRESS}) & ((balanceOf$1) : (((((1..6)*{ADDRESS})) --> (NAT)))) & soldOf_$1 : ((1..6)*{ADDRESS}) +-> NAT & dom(soldOf_$1) = ((1..6)*{ADDRESS}) & ((soldOf_$1) : (((((1..6)*{ADDRESS})) --> (NAT))));
((seller) : (USERS)) & ((buyer) : (USERS)) & ((arbiter) : (((1..6)*{ADDRESS}))) & ((price) : (NAT)) & ((state) : (((1..4)*{process_state}))) & balanceOf : ((1..6)*{ADDRESS}) +-> NAT & dom(balanceOf) = ((1..6)*{ADDRESS}) & ((balanceOf) : (((((1..6)*{ADDRESS})) --> (NAT)))) & soldOf_ : ((1..6)*{ADDRESS}) +-> NAT & dom(soldOf_) = ((1..6)*{ADDRESS}) & ((soldOf_) : (((((1..6)*{ADDRESS})) --> (NAT))));
((balanceOf) = (balanceOf$1)) & ((soldOf_) = (soldOf_$1)) & ((seller_i$1) : (USERS)) & ((arbiter_i$1) : (USERS)) & ((buyer_i$1) : (USERS)) & ((state_i$1) : (((1..4)*{process_state}))) & ((price_i$1) : (NAT)) & ((seller_i$1) = (seller)) & ((arbiter_i$1) = (arbiter)) & ((buyer_i$1) = (buyer)) & ((state_i$1) = (state)) & ((price_i$1) = (price));
((msg_sender) : (((1..6)*{ADDRESS})));
((msg_value) : ((NAT-{0})));
((((soldOf_$1 )(msg_sender) + msg_value)) : (NAT));
((({((msg_sender) |-> (((soldOf_$1 )(msg_sender) + msg_value)))})) : (((((1..6)*{ADDRESS})) +-> (NAT))));
"Precondition predicate";
"Refinement is correct";
((((((soldOf_$1) <+ (({((msg_sender) |-> (((soldOf_$1 )(msg_sender) + msg_value)))})))) <+ (({((msg_sender) |-> (((((soldOf_$1) <+ (({((msg_sender) |-> (((soldOf_$1 )(msg_sender) + msg_value)))}))) )(msg_sender) + msg_value)))})))) = (soldOf_$1));
((msg_sender) : (USERS));
((msg_value) : (NAT));
((state) = ((1|->process_state)));
((msg_sender) = (buyer));
((msg_value) = (price));
((((balanceOf$1 )(msg_sender) - msg_value)) : (NAT));
((((balanceOf$1 )((2|->ADDRESS)) + msg_value)) : (NAT));
(((2|->ADDRESS)) : (((1..6)*{ADDRESS})));
not((((2|->ADDRESS)) = (msg_sender)));
((((balanceOf$1 )((2|->ADDRESS)) + price_i$1)) : (NAT));
((((balanceOf$1 )(msg_sender) - price_i$1)) : (NAT));
((((((balanceOf$1) <+ (({((msg_sender) |-> (((balanceOf$1 )(msg_sender) - price_i$1)))}\/{(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) + price_i$1)))})))) <+ (({((buyer) |-> (((((balanceOf$1) <+ (({((msg_sender) |-> (((balanceOf$1 )(msg_sender) - price_i$1)))}\/{(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) + price_i$1)))}))) )(buyer) - price)))}\/{(((2|->ADDRESS)) |-> (((((balanceOf$1) <+ (({((msg_sender) |-> (((balanceOf$1 )(msg_sender) - price_i$1)))}\/{(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) + price_i$1)))}))) )((2|->ADDRESS)) + price)))})))) = (balanceOf$1));
((msg_sender) = (arbiter));
((state) = ((2|->process_state)));
((((balanceOf$1 )((2|->ADDRESS)) - price)) : (NAT));
((((balanceOf$1 )(buyer) + price)) : (NAT));
((buyer_i$1) : (((1..6)*{ADDRESS})));
not(((buyer_i$1) = ((2|->ADDRESS))));
((((balanceOf$1 )(buyer_i$1) + price_i$1)) : (NAT));
((((balanceOf$1 )((2|->ADDRESS)) - price_i$1)) : (NAT));
((((((balanceOf$1) <+ (({(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) - price_i$1)))}\/{((buyer_i$1) |-> (((balanceOf$1 )(buyer_i$1) + price_i$1)))})))) <+ (({(((2|->ADDRESS)) |-> (((((balanceOf$1) <+ (({(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) - price_i$1)))}\/{((buyer_i$1) |-> (((balanceOf$1 )(buyer_i$1) + price_i$1)))}))) )((2|->ADDRESS)) - price)))}\/{((buyer) |-> (((((balanceOf$1) <+ (({(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) - price_i$1)))}\/{((buyer_i$1) |-> (((balanceOf$1 )(buyer_i$1) + price_i$1)))}))) )(buyer) + price)))})))) = (balanceOf$1));
((((balanceOf$1 )(seller) + price)) : (NAT));
((seller_i$1) : (((1..6)*{ADDRESS})));
not(((seller_i$1) = ((2|->ADDRESS))));
((((balanceOf$1 )(seller_i$1) + price_i$1)) : (NAT));
((((((balanceOf$1) <+ (({(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) - price_i$1)))}\/{((seller_i$1) |-> (((balanceOf$1 )(seller_i$1) + price_i$1)))})))) <+ (({(((2|->ADDRESS)) |-> (((((balanceOf$1) <+ (({(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) - price_i$1)))}\/{((seller_i$1) |-> (((balanceOf$1 )(seller_i$1) + price_i$1)))}))) )((2|->ADDRESS)) - price)))}\/{((seller) |-> (((((balanceOf$1) <+ (({(((2|->ADDRESS)) |-> (((balanceOf$1 )((2|->ADDRESS)) - price_i$1)))}\/{((seller_i$1) |-> (((balanceOf$1 )(seller_i$1) + price_i$1)))}))) )(seller) + price)))})))) = (balanceOf$1))
END
&
THEORY EnumerateX IS
ADDRESS == {addr_0,THIS,addr_1,addr_2,addr_3,addr_4};
process_state == {INIT,DEPOSITED,REFUNDED,COMPLETED}
END
